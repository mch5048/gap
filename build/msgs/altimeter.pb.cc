// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: altimeter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "altimeter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Altimeter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Altimeter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_altimeter_2eproto() {
  protobuf_AddDesc_altimeter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "altimeter.proto");
  GOOGLE_CHECK(file != NULL);
  Altimeter_descriptor_ = file->message_type(0);
  static const int Altimeter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, vertical_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, vertical_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, vertical_reference_),
  };
  Altimeter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Altimeter_descriptor_,
      Altimeter::default_instance_,
      Altimeter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Altimeter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Altimeter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_altimeter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Altimeter_descriptor_, &Altimeter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_altimeter_2eproto() {
  delete Altimeter::default_instance_;
  delete Altimeter_reflection_;
}

void protobuf_AddDesc_altimeter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017altimeter.proto\022\013gazebo.msgs\032\ntime.pro"
    "to\"~\n\tAltimeter\022\037\n\004time\030\001 \002(\0132\021.gazebo.m"
    "sgs.Time\022\031\n\021vertical_position\030\002 \002(\001\022\031\n\021v"
    "ertical_velocity\030\003 \002(\001\022\032\n\022vertical_refer"
    "ence\030\004 \002(\001", 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "altimeter.proto", &protobuf_RegisterTypes);
  Altimeter::default_instance_ = new Altimeter();
  Altimeter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_altimeter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_altimeter_2eproto {
  StaticDescriptorInitializer_altimeter_2eproto() {
    protobuf_AddDesc_altimeter_2eproto();
  }
} static_descriptor_initializer_altimeter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Altimeter::kTimeFieldNumber;
const int Altimeter::kVerticalPositionFieldNumber;
const int Altimeter::kVerticalVelocityFieldNumber;
const int Altimeter::kVerticalReferenceFieldNumber;
#endif  // !_MSC_VER

Altimeter::Altimeter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Altimeter)
}

void Altimeter::InitAsDefaultInstance() {
  time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Altimeter::Altimeter(const Altimeter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Altimeter)
}

void Altimeter::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  vertical_position_ = 0;
  vertical_velocity_ = 0;
  vertical_reference_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Altimeter::~Altimeter() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Altimeter)
  SharedDtor();
}

void Altimeter::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void Altimeter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Altimeter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Altimeter_descriptor_;
}

const Altimeter& Altimeter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_altimeter_2eproto();
  return *default_instance_;
}

Altimeter* Altimeter::default_instance_ = NULL;

Altimeter* Altimeter::New() const {
  return new Altimeter;
}

void Altimeter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Altimeter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(vertical_position_, vertical_reference_);
    if (has_time()) {
      if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Altimeter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Altimeter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vertical_position;
        break;
      }

      // required double vertical_position = 2;
      case 2: {
        if (tag == 17) {
         parse_vertical_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_position_)));
          set_has_vertical_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vertical_velocity;
        break;
      }

      // required double vertical_velocity = 3;
      case 3: {
        if (tag == 25) {
         parse_vertical_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_velocity_)));
          set_has_vertical_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_vertical_reference;
        break;
      }

      // required double vertical_reference = 4;
      case 4: {
        if (tag == 33) {
         parse_vertical_reference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_reference_)));
          set_has_vertical_reference();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Altimeter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Altimeter)
  return false;
#undef DO_
}

void Altimeter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Altimeter)
  // required .gazebo.msgs.Time time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  // required double vertical_position = 2;
  if (has_vertical_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vertical_position(), output);
  }

  // required double vertical_velocity = 3;
  if (has_vertical_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vertical_velocity(), output);
  }

  // required double vertical_reference = 4;
  if (has_vertical_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vertical_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Altimeter)
}

::google::protobuf::uint8* Altimeter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Altimeter)
  // required .gazebo.msgs.Time time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  // required double vertical_position = 2;
  if (has_vertical_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical_position(), target);
  }

  // required double vertical_velocity = 3;
  if (has_vertical_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vertical_velocity(), target);
  }

  // required double vertical_reference = 4;
  if (has_vertical_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vertical_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Altimeter)
  return target;
}

int Altimeter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Time time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required double vertical_position = 2;
    if (has_vertical_position()) {
      total_size += 1 + 8;
    }

    // required double vertical_velocity = 3;
    if (has_vertical_velocity()) {
      total_size += 1 + 8;
    }

    // required double vertical_reference = 4;
    if (has_vertical_reference()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Altimeter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Altimeter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Altimeter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Altimeter::MergeFrom(const Altimeter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_vertical_position()) {
      set_vertical_position(from.vertical_position());
    }
    if (from.has_vertical_velocity()) {
      set_vertical_velocity(from.vertical_velocity());
    }
    if (from.has_vertical_reference()) {
      set_vertical_reference(from.vertical_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Altimeter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Altimeter::CopyFrom(const Altimeter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Altimeter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void Altimeter::Swap(Altimeter* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(vertical_position_, other->vertical_position_);
    std::swap(vertical_velocity_, other->vertical_velocity_);
    std::swap(vertical_reference_, other->vertical_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Altimeter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Altimeter_descriptor_;
  metadata.reflection = Altimeter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
