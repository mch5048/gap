// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_utils_response.proto

#ifndef PROTOBUF_camera_5futils_5fresponse_2eproto__INCLUDED
#define PROTOBUF_camera_5futils_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "point_projection.pb.h"
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camera_5futils_5fresponse_2eproto();
void protobuf_AssignDesc_camera_5futils_5fresponse_2eproto();
void protobuf_ShutdownFile_camera_5futils_5fresponse_2eproto();

class CameraUtilsResponse;

enum CameraUtilsResponse_Type {
  CameraUtilsResponse_Type_CAPTURE = 1,
  CameraUtilsResponse_Type_DIR = 2,
  CameraUtilsResponse_Type_MOVE = 3,
  CameraUtilsResponse_Type_PROJECTION = 4
};
bool CameraUtilsResponse_Type_IsValid(int value);
const CameraUtilsResponse_Type CameraUtilsResponse_Type_Type_MIN = CameraUtilsResponse_Type_CAPTURE;
const CameraUtilsResponse_Type CameraUtilsResponse_Type_Type_MAX = CameraUtilsResponse_Type_PROJECTION;
const int CameraUtilsResponse_Type_Type_ARRAYSIZE = CameraUtilsResponse_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraUtilsResponse_Type_descriptor();
inline const ::std::string& CameraUtilsResponse_Type_Name(CameraUtilsResponse_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraUtilsResponse_Type_descriptor(), value);
}
inline bool CameraUtilsResponse_Type_Parse(
    const ::std::string& name, CameraUtilsResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraUtilsResponse_Type>(
    CameraUtilsResponse_Type_descriptor(), name, value);
}
// ===================================================================

class CameraUtilsResponse : public ::google::protobuf::Message {
 public:
  CameraUtilsResponse();
  virtual ~CameraUtilsResponse();

  CameraUtilsResponse(const CameraUtilsResponse& from);

  inline CameraUtilsResponse& operator=(const CameraUtilsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraUtilsResponse& default_instance();

  void Swap(CameraUtilsResponse* other);

  // implements Message ----------------------------------------------

  CameraUtilsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraUtilsResponse& from);
  void MergeFrom(const CameraUtilsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CameraUtilsResponse_Type Type;
  static const Type CAPTURE = CameraUtilsResponse_Type_CAPTURE;
  static const Type DIR = CameraUtilsResponse_Type_DIR;
  static const Type MOVE = CameraUtilsResponse_Type_MOVE;
  static const Type PROJECTION = CameraUtilsResponse_Type_PROJECTION;
  static inline bool Type_IsValid(int value) {
    return CameraUtilsResponse_Type_IsValid(value);
  }
  static const Type Type_MIN =
    CameraUtilsResponse_Type_Type_MIN;
  static const Type Type_MAX =
    CameraUtilsResponse_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    CameraUtilsResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return CameraUtilsResponse_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return CameraUtilsResponse_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return CameraUtilsResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gap.msgs.CameraUtilsResponse.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gap::msgs::CameraUtilsResponse_Type type() const;
  inline void set_type(::gap::msgs::CameraUtilsResponse_Type value);

  // optional string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional bool success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional .gazebo.msgs.Pose pose = 4;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 4;
  inline const ::gazebo::msgs::Pose& pose() const;
  inline ::gazebo::msgs::Pose* mutable_pose();
  inline ::gazebo::msgs::Pose* release_pose();
  inline void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // repeated .gap.msgs.PointProjection projections = 5;
  inline int projections_size() const;
  inline void clear_projections();
  static const int kProjectionsFieldNumber = 5;
  inline const ::gap::msgs::PointProjection& projections(int index) const;
  inline ::gap::msgs::PointProjection* mutable_projections(int index);
  inline ::gap::msgs::PointProjection* add_projections();
  inline const ::google::protobuf::RepeatedPtrField< ::gap::msgs::PointProjection >&
      projections() const;
  inline ::google::protobuf::RepeatedPtrField< ::gap::msgs::PointProjection >*
      mutable_projections();

  // @@protoc_insertion_point(class_scope:gap.msgs.CameraUtilsResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_pose();
  inline void clear_has_pose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  int type_;
  bool success_;
  ::gazebo::msgs::Pose* pose_;
  ::google::protobuf::RepeatedPtrField< ::gap::msgs::PointProjection > projections_;
  friend void  protobuf_AddDesc_camera_5futils_5fresponse_2eproto();
  friend void protobuf_AssignDesc_camera_5futils_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_camera_5futils_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static CameraUtilsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraUtilsResponse

// optional .gap.msgs.CameraUtilsResponse.Type type = 1;
inline bool CameraUtilsResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraUtilsResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraUtilsResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraUtilsResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gap::msgs::CameraUtilsResponse_Type CameraUtilsResponse::type() const {
  // @@protoc_insertion_point(field_get:gap.msgs.CameraUtilsResponse.type)
  return static_cast< ::gap::msgs::CameraUtilsResponse_Type >(type_);
}
inline void CameraUtilsResponse::set_type(::gap::msgs::CameraUtilsResponse_Type value) {
  assert(::gap::msgs::CameraUtilsResponse_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.CameraUtilsResponse.type)
}

// optional string filename = 2;
inline bool CameraUtilsResponse::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraUtilsResponse::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraUtilsResponse::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraUtilsResponse::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& CameraUtilsResponse::filename() const {
  // @@protoc_insertion_point(field_get:gap.msgs.CameraUtilsResponse.filename)
  return *filename_;
}
inline void CameraUtilsResponse::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.CameraUtilsResponse.filename)
}
inline void CameraUtilsResponse::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.CameraUtilsResponse.filename)
}
inline void CameraUtilsResponse::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.CameraUtilsResponse.filename)
}
inline ::std::string* CameraUtilsResponse::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.CameraUtilsResponse.filename)
  return filename_;
}
inline ::std::string* CameraUtilsResponse::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraUtilsResponse::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.CameraUtilsResponse.filename)
}

// optional bool success = 3;
inline bool CameraUtilsResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraUtilsResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraUtilsResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraUtilsResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CameraUtilsResponse::success() const {
  // @@protoc_insertion_point(field_get:gap.msgs.CameraUtilsResponse.success)
  return success_;
}
inline void CameraUtilsResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.CameraUtilsResponse.success)
}

// optional .gazebo.msgs.Pose pose = 4;
inline bool CameraUtilsResponse::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraUtilsResponse::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraUtilsResponse::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraUtilsResponse::clear_pose() {
  if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::gazebo::msgs::Pose& CameraUtilsResponse::pose() const {
  // @@protoc_insertion_point(field_get:gap.msgs.CameraUtilsResponse.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::gazebo::msgs::Pose* CameraUtilsResponse::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::gazebo::msgs::Pose;
  // @@protoc_insertion_point(field_mutable:gap.msgs.CameraUtilsResponse.pose)
  return pose_;
}
inline ::gazebo::msgs::Pose* CameraUtilsResponse::release_pose() {
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void CameraUtilsResponse::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.CameraUtilsResponse.pose)
}

// repeated .gap.msgs.PointProjection projections = 5;
inline int CameraUtilsResponse::projections_size() const {
  return projections_.size();
}
inline void CameraUtilsResponse::clear_projections() {
  projections_.Clear();
}
inline const ::gap::msgs::PointProjection& CameraUtilsResponse::projections(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.CameraUtilsResponse.projections)
  return projections_.Get(index);
}
inline ::gap::msgs::PointProjection* CameraUtilsResponse::mutable_projections(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.CameraUtilsResponse.projections)
  return projections_.Mutable(index);
}
inline ::gap::msgs::PointProjection* CameraUtilsResponse::add_projections() {
  // @@protoc_insertion_point(field_add:gap.msgs.CameraUtilsResponse.projections)
  return projections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gap::msgs::PointProjection >&
CameraUtilsResponse::projections() const {
  // @@protoc_insertion_point(field_list:gap.msgs.CameraUtilsResponse.projections)
  return projections_;
}
inline ::google::protobuf::RepeatedPtrField< ::gap::msgs::PointProjection >*
CameraUtilsResponse::mutable_projections() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.CameraUtilsResponse.projections)
  return &projections_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gap::msgs::CameraUtilsResponse_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gap::msgs::CameraUtilsResponse_Type>() {
  return ::gap::msgs::CameraUtilsResponse_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_5futils_5fresponse_2eproto__INCLUDED
