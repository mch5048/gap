// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Visual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visual_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_Meta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Visual_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_visual_2eproto() {
  protobuf_AddDesc_visual_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "visual.proto");
  GOOGLE_CHECK(file != NULL);
  Visual_descriptor_ = file->message_type(0);
  static const int Visual_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, parent_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, cast_shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, laser_retro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, delete_me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, is_static_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, plugin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, type_),
  };
  Visual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Visual_descriptor_,
      Visual::default_instance_,
      Visual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Visual));
  Visual_Meta_descriptor_ = Visual_descriptor_->nested_type(0);
  static const int Visual_Meta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual_Meta, layer_),
  };
  Visual_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Visual_Meta_descriptor_,
      Visual_Meta::default_instance_,
      Visual_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Visual_Meta));
  Visual_Type_descriptor_ = Visual_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_visual_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Visual_descriptor_, &Visual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Visual_Meta_descriptor_, &Visual_Meta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_visual_2eproto() {
  delete Visual::default_instance_;
  delete Visual_reflection_;
  delete Visual_Meta::default_instance_;
  delete Visual_Meta_reflection_;
}

void protobuf_AddDesc_visual_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_geometry_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_material_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_plugin_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014visual.proto\022\013gazebo.msgs\032\npose.proto\032"
    "\016geometry.proto\032\016material.proto\032\014plugin."
    "proto\032\016vector3d.proto\"\315\004\n\006Visual\022\014\n\004name"
    "\030\001 \002(\t\022\n\n\002id\030\002 \001(\r\022\023\n\013parent_name\030\003 \002(\t\022"
    "\021\n\tparent_id\030\004 \001(\r\022\024\n\014cast_shadows\030\005 \001(\010"
    "\022\024\n\014transparency\030\006 \001(\001\022\023\n\013laser_retro\030\007 "
    "\001(\001\022\037\n\004pose\030\010 \001(\0132\021.gazebo.msgs.Pose\022\'\n\010"
    "geometry\030\t \001(\0132\025.gazebo.msgs.Geometry\022\'\n"
    "\010material\030\n \001(\0132\025.gazebo.msgs.Material\022\017"
    "\n\007visible\030\013 \001(\010\022\021\n\tdelete_me\030\014 \001(\010\022\021\n\tis"
    "_static\030\r \001(\010\022#\n\006plugin\030\016 \003(\0132\023.gazebo.m"
    "sgs.Plugin\022$\n\005scale\030\017 \001(\0132\025.gazebo.msgs."
    "Vector3d\022&\n\004meta\030\020 \001(\0132\030.gazebo.msgs.Vis"
    "ual.Meta\022&\n\004type\030\021 \001(\0162\030.gazebo.msgs.Vis"
    "ual.Type\032\025\n\004Meta\022\r\n\005layer\030\001 \001(\005\"d\n\004Type\022"
    "\n\n\006ENTITY\020\000\022\t\n\005MODEL\020\001\022\010\n\004LINK\020\002\022\n\n\006VISU"
    "AL\020\003\022\r\n\tCOLLISION\020\004\022\n\n\006SENSOR\020\005\022\007\n\003GUI\020\006"
    "\022\013\n\007PHYSICS\020\007", 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "visual.proto", &protobuf_RegisterTypes);
  Visual::default_instance_ = new Visual();
  Visual_Meta::default_instance_ = new Visual_Meta();
  Visual::default_instance_->InitAsDefaultInstance();
  Visual_Meta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_visual_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_visual_2eproto {
  StaticDescriptorInitializer_visual_2eproto() {
    protobuf_AddDesc_visual_2eproto();
  }
} static_descriptor_initializer_visual_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Visual_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_Type_descriptor_;
}
bool Visual_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Visual_Type Visual::ENTITY;
const Visual_Type Visual::MODEL;
const Visual_Type Visual::LINK;
const Visual_Type Visual::VISUAL;
const Visual_Type Visual::COLLISION;
const Visual_Type Visual::SENSOR;
const Visual_Type Visual::GUI;
const Visual_Type Visual::PHYSICS;
const Visual_Type Visual::Type_MIN;
const Visual_Type Visual::Type_MAX;
const int Visual::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Visual_Meta::kLayerFieldNumber;
#endif  // !_MSC_VER

Visual_Meta::Visual_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual.Meta)
}

void Visual_Meta::InitAsDefaultInstance() {
}

Visual_Meta::Visual_Meta(const Visual_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual.Meta)
}

void Visual_Meta::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Visual_Meta::~Visual_Meta() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual.Meta)
  SharedDtor();
}

void Visual_Meta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Visual_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_Meta_descriptor_;
}

const Visual_Meta& Visual_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_visual_2eproto();
  return *default_instance_;
}

Visual_Meta* Visual_Meta::default_instance_ = NULL;

Visual_Meta* Visual_Meta::New() const {
  return new Visual_Meta;
}

void Visual_Meta::Clear() {
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Visual_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Visual.Meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Visual.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Visual.Meta)
  return false;
#undef DO_
}

void Visual_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Visual.Meta)
  // optional int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Visual.Meta)
}

::google::protobuf::uint8* Visual_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual.Meta)
  // optional int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual.Meta)
  return target;
}

int Visual_Meta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Visual_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Visual_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Visual_Meta::MergeFrom(const Visual_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Visual_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual_Meta::CopyFrom(const Visual_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual_Meta::IsInitialized() const {

  return true;
}

void Visual_Meta::Swap(Visual_Meta* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Visual_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_Meta_descriptor_;
  metadata.reflection = Visual_Meta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Visual::kNameFieldNumber;
const int Visual::kIdFieldNumber;
const int Visual::kParentNameFieldNumber;
const int Visual::kParentIdFieldNumber;
const int Visual::kCastShadowsFieldNumber;
const int Visual::kTransparencyFieldNumber;
const int Visual::kLaserRetroFieldNumber;
const int Visual::kPoseFieldNumber;
const int Visual::kGeometryFieldNumber;
const int Visual::kMaterialFieldNumber;
const int Visual::kVisibleFieldNumber;
const int Visual::kDeleteMeFieldNumber;
const int Visual::kIsStaticFieldNumber;
const int Visual::kPluginFieldNumber;
const int Visual::kScaleFieldNumber;
const int Visual::kMetaFieldNumber;
const int Visual::kTypeFieldNumber;
#endif  // !_MSC_VER

Visual::Visual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Visual)
}

void Visual::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  geometry_ = const_cast< ::gazebo::msgs::Geometry*>(&::gazebo::msgs::Geometry::default_instance());
  material_ = const_cast< ::gazebo::msgs::Material*>(&::gazebo::msgs::Material::default_instance());
  scale_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  meta_ = const_cast< ::gazebo::msgs::Visual_Meta*>(&::gazebo::msgs::Visual_Meta::default_instance());
}

Visual::Visual(const Visual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Visual)
}

void Visual::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  parent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0u;
  cast_shadows_ = false;
  transparency_ = 0;
  laser_retro_ = 0;
  pose_ = NULL;
  geometry_ = NULL;
  material_ = NULL;
  visible_ = false;
  delete_me_ = false;
  is_static_ = false;
  scale_ = NULL;
  meta_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (parent_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_name_;
  }
  if (this != default_instance_) {
    delete pose_;
    delete geometry_;
    delete material_;
    delete scale_;
    delete meta_;
  }
}

void Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_descriptor_;
}

const Visual& Visual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_visual_2eproto();
  return *default_instance_;
}

Visual* Visual::default_instance_ = NULL;

Visual* Visual::New() const {
  return new Visual;
}

void Visual::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Visual*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, laser_retro_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_parent_name()) {
      if (parent_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_name_->clear();
      }
    }
    cast_shadows_ = false;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 57088) {
    ZR_(visible_, is_static_);
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::gazebo::msgs::Geometry::Clear();
    }
    if (has_material()) {
      if (material_ != NULL) material_->::gazebo::msgs::Material::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_meta()) {
      if (meta_ != NULL) meta_->::gazebo::msgs::Visual_Meta::Clear();
    }
  }
  type_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  plugin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Visual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_name;
        break;
      }

      // required string parent_name = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_name().data(), this->parent_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parent_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parent_id;
        break;
      }

      // optional uint32 parent_id = 4;
      case 4: {
        if (tag == 32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cast_shadows;
        break;
      }

      // optional bool cast_shadows = 5;
      case 5: {
        if (tag == 40) {
         parse_cast_shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cast_shadows_)));
          set_has_cast_shadows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_transparency;
        break;
      }

      // optional double transparency = 6;
      case 6: {
        if (tag == 49) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_laser_retro;
        break;
      }

      // optional double laser_retro = 7;
      case 7: {
        if (tag == 57) {
         parse_laser_retro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
          set_has_laser_retro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 8;
      case 8: {
        if (tag == 66) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_geometry;
        break;
      }

      // optional .gazebo.msgs.Geometry geometry = 9;
      case 9: {
        if (tag == 74) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_material;
        break;
      }

      // optional .gazebo.msgs.Material material = 10;
      case 10: {
        if (tag == 82) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_visible;
        break;
      }

      // optional bool visible = 11;
      case 11: {
        if (tag == 88) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_delete_me;
        break;
      }

      // optional bool delete_me = 12;
      case 12: {
        if (tag == 96) {
         parse_delete_me:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_me_)));
          set_has_delete_me();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_static;
        break;
      }

      // optional bool is_static = 13;
      case 13: {
        if (tag == 104) {
         parse_is_static:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
          set_has_is_static();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_plugin;
        break;
      }

      // repeated .gazebo.msgs.Plugin plugin = 14;
      case 14: {
        if (tag == 114) {
         parse_plugin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_plugin;
        if (input->ExpectTag(122)) goto parse_scale;
        break;
      }

      // optional .gazebo.msgs.Vector3d scale = 15;
      case 15: {
        if (tag == 122) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_meta;
        break;
      }

      // optional .gazebo.msgs.Visual.Meta meta = 16;
      case 16: {
        if (tag == 130) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_type;
        break;
      }

      // optional .gazebo.msgs.Visual.Type type = 17;
      case 17: {
        if (tag == 136) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Visual_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::Visual_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Visual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string parent_name = 3;
  if (has_parent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_name(), output);
  }

  // optional uint32 parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_id(), output);
  }

  // optional bool cast_shadows = 5;
  if (has_cast_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cast_shadows(), output);
  }

  // optional double transparency = 6;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->transparency(), output);
  }

  // optional double laser_retro = 7;
  if (has_laser_retro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->laser_retro(), output);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pose(), output);
  }

  // optional .gazebo.msgs.Geometry geometry = 9;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->geometry(), output);
  }

  // optional .gazebo.msgs.Material material = 10;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->material(), output);
  }

  // optional bool visible = 11;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->visible(), output);
  }

  // optional bool delete_me = 12;
  if (has_delete_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->delete_me(), output);
  }

  // optional bool is_static = 13;
  if (has_is_static()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_static(), output);
  }

  // repeated .gazebo.msgs.Plugin plugin = 14;
  for (int i = 0; i < this->plugin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->plugin(i), output);
  }

  // optional .gazebo.msgs.Vector3d scale = 15;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->scale(), output);
  }

  // optional .gazebo.msgs.Visual.Meta meta = 16;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->meta(), output);
  }

  // optional .gazebo.msgs.Visual.Type type = 17;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Visual)
}

::google::protobuf::uint8* Visual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Visual)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string parent_name = 3;
  if (has_parent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_name(), target);
  }

  // optional uint32 parent_id = 4;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent_id(), target);
  }

  // optional bool cast_shadows = 5;
  if (has_cast_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cast_shadows(), target);
  }

  // optional double transparency = 6;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->transparency(), target);
  }

  // optional double laser_retro = 7;
  if (has_laser_retro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->laser_retro(), target);
  }

  // optional .gazebo.msgs.Pose pose = 8;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pose(), target);
  }

  // optional .gazebo.msgs.Geometry geometry = 9;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->geometry(), target);
  }

  // optional .gazebo.msgs.Material material = 10;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->material(), target);
  }

  // optional bool visible = 11;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->visible(), target);
  }

  // optional bool delete_me = 12;
  if (has_delete_me()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->delete_me(), target);
  }

  // optional bool is_static = 13;
  if (has_is_static()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_static(), target);
  }

  // repeated .gazebo.msgs.Plugin plugin = 14;
  for (int i = 0; i < this->plugin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->plugin(i), target);
  }

  // optional .gazebo.msgs.Vector3d scale = 15;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->scale(), target);
  }

  // optional .gazebo.msgs.Visual.Meta meta = 16;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->meta(), target);
  }

  // optional .gazebo.msgs.Visual.Type type = 17;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Visual)
  return target;
}

int Visual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string parent_name = 3;
    if (has_parent_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_name());
    }

    // optional uint32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

    // optional bool cast_shadows = 5;
    if (has_cast_shadows()) {
      total_size += 1 + 1;
    }

    // optional double transparency = 6;
    if (has_transparency()) {
      total_size += 1 + 8;
    }

    // optional double laser_retro = 7;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Pose pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gazebo.msgs.Geometry geometry = 9;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .gazebo.msgs.Material material = 10;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->material());
    }

    // optional bool visible = 11;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool delete_me = 12;
    if (has_delete_me()) {
      total_size += 1 + 1;
    }

    // optional bool is_static = 13;
    if (has_is_static()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Vector3d scale = 15;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional .gazebo.msgs.Visual.Meta meta = 16;
    if (has_meta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .gazebo.msgs.Visual.Type type = 17;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .gazebo.msgs.Plugin plugin = 14;
  total_size += 1 * this->plugin_size();
  for (int i = 0; i < this->plugin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plugin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Visual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Visual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
  GOOGLE_CHECK_NE(&from, this);
  plugin_.MergeFrom(from.plugin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_name()) {
      set_parent_name(from.parent_name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_cast_shadows()) {
      set_cast_shadows(from.cast_shadows());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_laser_retro()) {
      set_laser_retro(from.laser_retro());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::gazebo::msgs::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_material()) {
      mutable_material()->::gazebo::msgs::Material::MergeFrom(from.material());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_delete_me()) {
      set_delete_me(from.delete_me());
    }
    if (from.has_is_static()) {
      set_is_static(from.is_static());
    }
    if (from.has_scale()) {
      mutable_scale()->::gazebo::msgs::Vector3d::MergeFrom(from.scale());
    }
    if (from.has_meta()) {
      mutable_meta()->::gazebo::msgs::Visual_Meta::MergeFrom(from.meta());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_material()) {
    if (!this->material().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->plugin())) return false;
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  return true;
}

void Visual::Swap(Visual* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(parent_name_, other->parent_name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(cast_shadows_, other->cast_shadows_);
    std::swap(transparency_, other->transparency_);
    std::swap(laser_retro_, other->laser_retro_);
    std::swap(pose_, other->pose_);
    std::swap(geometry_, other->geometry_);
    std::swap(material_, other->material_);
    std::swap(visible_, other->visible_);
    std::swap(delete_me_, other->delete_me_);
    std::swap(is_static_, other->is_static_);
    plugin_.Swap(&other->plugin_);
    std::swap(scale_, other->scale_);
    std::swap(meta_, other->meta_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_descriptor_;
  metadata.reflection = Visual_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
