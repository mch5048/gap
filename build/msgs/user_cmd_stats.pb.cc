// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_cmd_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_cmd_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* UserCmdStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCmdStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fcmd_5fstats_2eproto() {
  protobuf_AddDesc_user_5fcmd_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_cmd_stats.proto");
  GOOGLE_CHECK(file != NULL);
  UserCmdStats_descriptor_ = file->message_type(0);
  static const int UserCmdStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, undo_cmd_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, redo_cmd_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, undo_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, redo_cmd_),
  };
  UserCmdStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCmdStats_descriptor_,
      UserCmdStats::default_instance_,
      UserCmdStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmdStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCmdStats));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fcmd_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCmdStats_descriptor_, &UserCmdStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fcmd_5fstats_2eproto() {
  delete UserCmdStats::default_instance_;
  delete UserCmdStats_reflection_;
}

void protobuf_AddDesc_user_5fcmd_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_user_5fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024user_cmd_stats.proto\022\013gazebo.msgs\032\016use"
    "r_cmd.proto\"\216\001\n\014UserCmdStats\022\026\n\016undo_cmd"
    "_count\030\001 \002(\r\022\026\n\016redo_cmd_count\030\002 \002(\r\022&\n\010"
    "undo_cmd\030\003 \003(\0132\024.gazebo.msgs.UserCmd\022&\n\010"
    "redo_cmd\030\004 \003(\0132\024.gazebo.msgs.UserCmd", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_cmd_stats.proto", &protobuf_RegisterTypes);
  UserCmdStats::default_instance_ = new UserCmdStats();
  UserCmdStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fcmd_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fcmd_5fstats_2eproto {
  StaticDescriptorInitializer_user_5fcmd_5fstats_2eproto() {
    protobuf_AddDesc_user_5fcmd_5fstats_2eproto();
  }
} static_descriptor_initializer_user_5fcmd_5fstats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserCmdStats::kUndoCmdCountFieldNumber;
const int UserCmdStats::kRedoCmdCountFieldNumber;
const int UserCmdStats::kUndoCmdFieldNumber;
const int UserCmdStats::kRedoCmdFieldNumber;
#endif  // !_MSC_VER

UserCmdStats::UserCmdStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.UserCmdStats)
}

void UserCmdStats::InitAsDefaultInstance() {
}

UserCmdStats::UserCmdStats(const UserCmdStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.UserCmdStats)
}

void UserCmdStats::SharedCtor() {
  _cached_size_ = 0;
  undo_cmd_count_ = 0u;
  redo_cmd_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCmdStats::~UserCmdStats() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.UserCmdStats)
  SharedDtor();
}

void UserCmdStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCmdStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCmdStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCmdStats_descriptor_;
}

const UserCmdStats& UserCmdStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fcmd_5fstats_2eproto();
  return *default_instance_;
}

UserCmdStats* UserCmdStats::default_instance_ = NULL;

UserCmdStats* UserCmdStats::New() const {
  return new UserCmdStats;
}

void UserCmdStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCmdStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(undo_cmd_count_, redo_cmd_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  undo_cmd_.Clear();
  redo_cmd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCmdStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.UserCmdStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 undo_cmd_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undo_cmd_count_)));
          set_has_undo_cmd_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redo_cmd_count;
        break;
      }

      // required uint32 redo_cmd_count = 2;
      case 2: {
        if (tag == 16) {
         parse_redo_cmd_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redo_cmd_count_)));
          set_has_redo_cmd_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_undo_cmd;
        break;
      }

      // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_undo_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undo_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_undo_cmd;
        if (input->ExpectTag(34)) goto parse_redo_cmd;
        break;
      }

      // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_redo_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redo_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_redo_cmd;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.UserCmdStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.UserCmdStats)
  return false;
#undef DO_
}

void UserCmdStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.UserCmdStats)
  // required uint32 undo_cmd_count = 1;
  if (has_undo_cmd_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->undo_cmd_count(), output);
  }

  // required uint32 redo_cmd_count = 2;
  if (has_redo_cmd_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->redo_cmd_count(), output);
  }

  // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
  for (int i = 0; i < this->undo_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cmd(i), output);
  }

  // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
  for (int i = 0; i < this->redo_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cmd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.UserCmdStats)
}

::google::protobuf::uint8* UserCmdStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.UserCmdStats)
  // required uint32 undo_cmd_count = 1;
  if (has_undo_cmd_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->undo_cmd_count(), target);
  }

  // required uint32 redo_cmd_count = 2;
  if (has_redo_cmd_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->redo_cmd_count(), target);
  }

  // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
  for (int i = 0; i < this->undo_cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cmd(i), target);
  }

  // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
  for (int i = 0; i < this->redo_cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cmd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.UserCmdStats)
  return target;
}

int UserCmdStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 undo_cmd_count = 1;
    if (has_undo_cmd_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undo_cmd_count());
    }

    // required uint32 redo_cmd_count = 2;
    if (has_redo_cmd_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redo_cmd_count());
    }

  }
  // repeated .gazebo.msgs.UserCmd undo_cmd = 3;
  total_size += 1 * this->undo_cmd_size();
  for (int i = 0; i < this->undo_cmd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undo_cmd(i));
  }

  // repeated .gazebo.msgs.UserCmd redo_cmd = 4;
  total_size += 1 * this->redo_cmd_size();
  for (int i = 0; i < this->redo_cmd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redo_cmd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCmdStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCmdStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCmdStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCmdStats::MergeFrom(const UserCmdStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  undo_cmd_.MergeFrom(from.undo_cmd_);
  redo_cmd_.MergeFrom(from.redo_cmd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undo_cmd_count()) {
      set_undo_cmd_count(from.undo_cmd_count());
    }
    if (from.has_redo_cmd_count()) {
      set_redo_cmd_count(from.redo_cmd_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCmdStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCmdStats::CopyFrom(const UserCmdStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCmdStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->undo_cmd())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->redo_cmd())) return false;
  return true;
}

void UserCmdStats::Swap(UserCmdStats* other) {
  if (other != this) {
    std::swap(undo_cmd_count_, other->undo_cmd_count_);
    std::swap(redo_cmd_count_, other->redo_cmd_count_);
    undo_cmd_.Swap(&other->undo_cmd_);
    redo_cmd_.Swap(&other->redo_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCmdStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCmdStats_descriptor_;
  metadata.reflection = UserCmdStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
