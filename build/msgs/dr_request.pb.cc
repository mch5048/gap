// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dr_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dr_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* DRRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DRRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dr_5frequest_2eproto() {
  protobuf_AddDesc_dr_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dr_request.proto");
  GOOGLE_CHECK(file != NULL);
  DRRequest_descriptor_ = file->message_type(0);
  static const int DRRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, physics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, model_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, feedback_),
  };
  DRRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DRRequest_descriptor_,
      DRRequest::default_instance_,
      DRRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DRRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DRRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dr_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DRRequest_descriptor_, &DRRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dr_5frequest_2eproto() {
  delete DRRequest::default_instance_;
  delete DRRequest_reflection_;
}

void protobuf_AddDesc_dr_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_physics_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_model_2eproto();
  ::gap::msgs::protobuf_AddDesc_model_5fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dr_request.proto\022\010gap.msgs\032\rphysics.pr"
    "oto\032\013model.proto\032\017model_cmd.proto\"\216\001\n\tDR"
    "Request\022%\n\007physics\030\001 \001(\0132\024.gazebo.msgs.P"
    "hysics\022!\n\005model\030\002 \003(\0132\022.gazebo.msgs.Mode"
    "l\022%\n\tmodel_cmd\030\003 \003(\0132\022.gap.msgs.ModelCmd"
    "\022\020\n\010feedback\030\004 \001(\010", 218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dr_request.proto", &protobuf_RegisterTypes);
  DRRequest::default_instance_ = new DRRequest();
  DRRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dr_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dr_5frequest_2eproto {
  StaticDescriptorInitializer_dr_5frequest_2eproto() {
    protobuf_AddDesc_dr_5frequest_2eproto();
  }
} static_descriptor_initializer_dr_5frequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DRRequest::kPhysicsFieldNumber;
const int DRRequest::kModelFieldNumber;
const int DRRequest::kModelCmdFieldNumber;
const int DRRequest::kFeedbackFieldNumber;
#endif  // !_MSC_VER

DRRequest::DRRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gap.msgs.DRRequest)
}

void DRRequest::InitAsDefaultInstance() {
  physics_ = const_cast< ::gazebo::msgs::Physics*>(&::gazebo::msgs::Physics::default_instance());
}

DRRequest::DRRequest(const DRRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gap.msgs.DRRequest)
}

void DRRequest::SharedCtor() {
  _cached_size_ = 0;
  physics_ = NULL;
  feedback_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DRRequest::~DRRequest() {
  // @@protoc_insertion_point(destructor:gap.msgs.DRRequest)
  SharedDtor();
}

void DRRequest::SharedDtor() {
  if (this != default_instance_) {
    delete physics_;
  }
}

void DRRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DRRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DRRequest_descriptor_;
}

const DRRequest& DRRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dr_5frequest_2eproto();
  return *default_instance_;
}

DRRequest* DRRequest::default_instance_ = NULL;

DRRequest* DRRequest::New() const {
  return new DRRequest;
}

void DRRequest::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_physics()) {
      if (physics_ != NULL) physics_->::gazebo::msgs::Physics::Clear();
    }
    feedback_ = false;
  }
  model_.Clear();
  model_cmd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DRRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gap.msgs.DRRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Physics physics = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // repeated .gazebo.msgs.Model model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        if (input->ExpectTag(26)) goto parse_model_cmd;
        break;
      }

      // repeated .gap.msgs.ModelCmd model_cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_model_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model_cmd;
        if (input->ExpectTag(32)) goto parse_feedback;
        break;
      }

      // optional bool feedback = 4;
      case 4: {
        if (tag == 32) {
         parse_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feedback_)));
          set_has_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gap.msgs.DRRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gap.msgs.DRRequest)
  return false;
#undef DO_
}

void DRRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gap.msgs.DRRequest)
  // optional .gazebo.msgs.Physics physics = 1;
  if (has_physics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->physics(), output);
  }

  // repeated .gazebo.msgs.Model model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->model(i), output);
  }

  // repeated .gap.msgs.ModelCmd model_cmd = 3;
  for (int i = 0; i < this->model_cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->model_cmd(i), output);
  }

  // optional bool feedback = 4;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gap.msgs.DRRequest)
}

::google::protobuf::uint8* DRRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gap.msgs.DRRequest)
  // optional .gazebo.msgs.Physics physics = 1;
  if (has_physics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->physics(), target);
  }

  // repeated .gazebo.msgs.Model model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->model(i), target);
  }

  // repeated .gap.msgs.ModelCmd model_cmd = 3;
  for (int i = 0; i < this->model_cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->model_cmd(i), target);
  }

  // optional bool feedback = 4;
  if (has_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gap.msgs.DRRequest)
  return target;
}

int DRRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Physics physics = 1;
    if (has_physics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physics());
    }

    // optional bool feedback = 4;
    if (has_feedback()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gazebo.msgs.Model model = 2;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .gap.msgs.ModelCmd model_cmd = 3;
  total_size += 1 * this->model_cmd_size();
  for (int i = 0; i < this->model_cmd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model_cmd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DRRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DRRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DRRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DRRequest::MergeFrom(const DRRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  model_cmd_.MergeFrom(from.model_cmd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physics()) {
      mutable_physics()->::gazebo::msgs::Physics::MergeFrom(from.physics());
    }
    if (from.has_feedback()) {
      set_feedback(from.feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DRRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRRequest::CopyFrom(const DRRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRRequest::IsInitialized() const {

  if (has_physics()) {
    if (!this->physics().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->model())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->model_cmd())) return false;
  return true;
}

void DRRequest::Swap(DRRequest* other) {
  if (other != this) {
    std::swap(physics_, other->physics_);
    model_.Swap(&other->model_);
    model_cmd_.Swap(&other->model_cmd_);
    std::swap(feedback_, other->feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DRRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DRRequest_descriptor_;
  metadata.reflection = DRRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

// @@protoc_insertion_point(global_scope)
