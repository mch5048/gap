// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distortion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "distortion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Distortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Distortion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_distortion_2eproto() {
  protobuf_AddDesc_distortion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "distortion.proto");
  GOOGLE_CHECK(file != NULL);
  Distortion_descriptor_ = file->message_type(0);
  static const int Distortion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, k3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, p2_),
  };
  Distortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Distortion_descriptor_,
      Distortion::default_instance_,
      Distortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Distortion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_distortion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Distortion_descriptor_, &Distortion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_distortion_2eproto() {
  delete Distortion::default_instance_;
  delete Distortion_reflection_;
}

void protobuf_AddDesc_distortion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020distortion.proto\022\013gazebo.msgs\032\016vector2"
    "d.proto\"o\n\nDistortion\022%\n\006center\030\001 \001(\0132\025."
    "gazebo.msgs.Vector2d\022\n\n\002k1\030\002 \001(\001\022\n\n\002k2\030\003"
    " \001(\001\022\n\n\002k3\030\004 \001(\001\022\n\n\002p1\030\005 \001(\001\022\n\n\002p2\030\006 \001(\001", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "distortion.proto", &protobuf_RegisterTypes);
  Distortion::default_instance_ = new Distortion();
  Distortion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_distortion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_distortion_2eproto {
  StaticDescriptorInitializer_distortion_2eproto() {
    protobuf_AddDesc_distortion_2eproto();
  }
} static_descriptor_initializer_distortion_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Distortion::kCenterFieldNumber;
const int Distortion::kK1FieldNumber;
const int Distortion::kK2FieldNumber;
const int Distortion::kK3FieldNumber;
const int Distortion::kP1FieldNumber;
const int Distortion::kP2FieldNumber;
#endif  // !_MSC_VER

Distortion::Distortion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Distortion)
}

void Distortion::InitAsDefaultInstance() {
  center_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
}

Distortion::Distortion(const Distortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Distortion)
}

void Distortion::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  p1_ = 0;
  p2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Distortion::~Distortion() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Distortion)
  SharedDtor();
}

void Distortion::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void Distortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Distortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Distortion_descriptor_;
}

const Distortion& Distortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_distortion_2eproto();
  return *default_instance_;
}

Distortion* Distortion::default_instance_ = NULL;

Distortion* Distortion::New() const {
  return new Distortion;
}

void Distortion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Distortion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(k1_, p2_);
    if (has_center()) {
      if (center_ != NULL) center_->::gazebo::msgs::Vector2d::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Distortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Distortion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Vector2d center = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_k1;
        break;
      }

      // optional double k1 = 2;
      case 2: {
        if (tag == 17) {
         parse_k1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_k2;
        break;
      }

      // optional double k2 = 3;
      case 3: {
        if (tag == 25) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_k3;
        break;
      }

      // optional double k3 = 4;
      case 4: {
        if (tag == 33) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_p1;
        break;
      }

      // optional double p1 = 5;
      case 5: {
        if (tag == 41) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_p2;
        break;
      }

      // optional double p2 = 6;
      case 6: {
        if (tag == 49) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Distortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Distortion)
  return false;
#undef DO_
}

void Distortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Distortion)
  // optional .gazebo.msgs.Vector2d center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }

  // optional double k1 = 2;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k1(), output);
  }

  // optional double k2 = 3;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k2(), output);
  }

  // optional double k3 = 4;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k3(), output);
  }

  // optional double p1 = 5;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->p1(), output);
  }

  // optional double p2 = 6;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->p2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Distortion)
}

::google::protobuf::uint8* Distortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Distortion)
  // optional .gazebo.msgs.Vector2d center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }

  // optional double k1 = 2;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k1(), target);
  }

  // optional double k2 = 3;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k2(), target);
  }

  // optional double k3 = 4;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k3(), target);
  }

  // optional double p1 = 5;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->p1(), target);
  }

  // optional double p2 = 6;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->p2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Distortion)
  return target;
}

int Distortion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Vector2d center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional double k1 = 2;
    if (has_k1()) {
      total_size += 1 + 8;
    }

    // optional double k2 = 3;
    if (has_k2()) {
      total_size += 1 + 8;
    }

    // optional double k3 = 4;
    if (has_k3()) {
      total_size += 1 + 8;
    }

    // optional double p1 = 5;
    if (has_p1()) {
      total_size += 1 + 8;
    }

    // optional double p2 = 6;
    if (has_p2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Distortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Distortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Distortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Distortion::MergeFrom(const Distortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::gazebo::msgs::Vector2d::MergeFrom(from.center());
    }
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Distortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distortion::CopyFrom(const Distortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distortion::IsInitialized() const {

  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void Distortion::Swap(Distortion* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(k3_, other->k3_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Distortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Distortion_descriptor_;
  metadata.reflection = Distortion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
