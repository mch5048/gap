// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_projection.proto

#ifndef PROTOBUF_point_5fprojection_2eproto__INCLUDED
#define PROTOBUF_point_5fprojection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_point_5fprojection_2eproto();
void protobuf_AssignDesc_point_5fprojection_2eproto();
void protobuf_ShutdownFile_point_5fprojection_2eproto();

class PointProjection;

// ===================================================================

class PointProjection : public ::google::protobuf::Message {
 public:
  PointProjection();
  virtual ~PointProjection();

  PointProjection(const PointProjection& from);

  inline PointProjection& operator=(const PointProjection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointProjection& default_instance();

  void Swap(PointProjection* other);

  // implements Message ----------------------------------------------

  PointProjection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointProjection& from);
  void MergeFrom(const PointProjection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gazebo.msgs.Vector2d point2 = 1;
  inline int point2_size() const;
  inline void clear_point2();
  static const int kPoint2FieldNumber = 1;
  inline const ::gazebo::msgs::Vector2d& point2(int index) const;
  inline ::gazebo::msgs::Vector2d* mutable_point2(int index);
  inline ::gazebo::msgs::Vector2d* add_point2();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector2d >&
      point2() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector2d >*
      mutable_point2();

  // repeated .gazebo.msgs.Vector3d point3 = 2;
  inline int point3_size() const;
  inline void clear_point3();
  static const int kPoint3FieldNumber = 2;
  inline const ::gazebo::msgs::Vector3d& point3(int index) const;
  inline ::gazebo::msgs::Vector3d* mutable_point3(int index);
  inline ::gazebo::msgs::Vector3d* add_point3();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
      point3() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
      mutable_point3();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gap.msgs.PointProjection)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector2d > point2_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d > point3_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_point_5fprojection_2eproto();
  friend void protobuf_AssignDesc_point_5fprojection_2eproto();
  friend void protobuf_ShutdownFile_point_5fprojection_2eproto();

  void InitAsDefaultInstance();
  static PointProjection* default_instance_;
};
// ===================================================================


// ===================================================================

// PointProjection

// repeated .gazebo.msgs.Vector2d point2 = 1;
inline int PointProjection::point2_size() const {
  return point2_.size();
}
inline void PointProjection::clear_point2() {
  point2_.Clear();
}
inline const ::gazebo::msgs::Vector2d& PointProjection::point2(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.PointProjection.point2)
  return point2_.Get(index);
}
inline ::gazebo::msgs::Vector2d* PointProjection::mutable_point2(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.PointProjection.point2)
  return point2_.Mutable(index);
}
inline ::gazebo::msgs::Vector2d* PointProjection::add_point2() {
  // @@protoc_insertion_point(field_add:gap.msgs.PointProjection.point2)
  return point2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector2d >&
PointProjection::point2() const {
  // @@protoc_insertion_point(field_list:gap.msgs.PointProjection.point2)
  return point2_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector2d >*
PointProjection::mutable_point2() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.PointProjection.point2)
  return &point2_;
}

// repeated .gazebo.msgs.Vector3d point3 = 2;
inline int PointProjection::point3_size() const {
  return point3_.size();
}
inline void PointProjection::clear_point3() {
  point3_.Clear();
}
inline const ::gazebo::msgs::Vector3d& PointProjection::point3(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.PointProjection.point3)
  return point3_.Get(index);
}
inline ::gazebo::msgs::Vector3d* PointProjection::mutable_point3(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.PointProjection.point3)
  return point3_.Mutable(index);
}
inline ::gazebo::msgs::Vector3d* PointProjection::add_point3() {
  // @@protoc_insertion_point(field_add:gap.msgs.PointProjection.point3)
  return point3_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
PointProjection::point3() const {
  // @@protoc_insertion_point(field_list:gap.msgs.PointProjection.point3)
  return point3_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
PointProjection::mutable_point3() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.PointProjection.point3)
  return &point3_;
}

// optional string name = 3;
inline bool PointProjection::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointProjection::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointProjection::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointProjection::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PointProjection::name() const {
  // @@protoc_insertion_point(field_get:gap.msgs.PointProjection.name)
  return *name_;
}
inline void PointProjection::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.PointProjection.name)
}
inline void PointProjection::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.PointProjection.name)
}
inline void PointProjection::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.PointProjection.name)
}
inline ::std::string* PointProjection::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.PointProjection.name)
  return name_;
}
inline ::std::string* PointProjection::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PointProjection::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.PointProjection.name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_point_5fprojection_2eproto__INCLUDED
