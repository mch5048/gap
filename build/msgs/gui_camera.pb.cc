// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui_camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gui_camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* GUICamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUICamera_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gui_5fcamera_2eproto() {
  protobuf_AddDesc_gui_5fcamera_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gui_camera.proto");
  GOOGLE_CHECK(file != NULL);
  GUICamera_descriptor_ = file->message_type(0);
  static const int GUICamera_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, view_controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, projection_type_),
  };
  GUICamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUICamera_descriptor_,
      GUICamera::default_instance_,
      GUICamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUICamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUICamera));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gui_5fcamera_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUICamera_descriptor_, &GUICamera::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gui_5fcamera_2eproto() {
  delete GUICamera::default_instance_;
  delete GUICamera_reflection_;
}

void protobuf_AddDesc_gui_5fcamera_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_track_5fvisual_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020gui_camera.proto\022\013gazebo.msgs\032\npose.pr"
    "oto\032\022track_visual.proto\"\225\001\n\tGUICamera\022\014\n"
    "\004name\030\001 \002(\t\022\027\n\017view_controller\030\002 \001(\t\022\037\n\004"
    "pose\030\003 \001(\0132\021.gazebo.msgs.Pose\022\'\n\005track\030\004"
    " \001(\0132\030.gazebo.msgs.TrackVisual\022\027\n\017projec"
    "tion_type\030\005 \001(\t", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gui_camera.proto", &protobuf_RegisterTypes);
  GUICamera::default_instance_ = new GUICamera();
  GUICamera::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gui_5fcamera_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gui_5fcamera_2eproto {
  StaticDescriptorInitializer_gui_5fcamera_2eproto() {
    protobuf_AddDesc_gui_5fcamera_2eproto();
  }
} static_descriptor_initializer_gui_5fcamera_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GUICamera::kNameFieldNumber;
const int GUICamera::kViewControllerFieldNumber;
const int GUICamera::kPoseFieldNumber;
const int GUICamera::kTrackFieldNumber;
const int GUICamera::kProjectionTypeFieldNumber;
#endif  // !_MSC_VER

GUICamera::GUICamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.GUICamera)
}

void GUICamera::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  track_ = const_cast< ::gazebo::msgs::TrackVisual*>(&::gazebo::msgs::TrackVisual::default_instance());
}

GUICamera::GUICamera(const GUICamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.GUICamera)
}

void GUICamera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_controller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
  track_ = NULL;
  projection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUICamera::~GUICamera() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.GUICamera)
  SharedDtor();
}

void GUICamera::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (view_controller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete view_controller_;
  }
  if (projection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete projection_type_;
  }
  if (this != default_instance_) {
    delete pose_;
    delete track_;
  }
}

void GUICamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUICamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUICamera_descriptor_;
}

const GUICamera& GUICamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gui_5fcamera_2eproto();
  return *default_instance_;
}

GUICamera* GUICamera::default_instance_ = NULL;

GUICamera* GUICamera::New() const {
  return new GUICamera;
}

void GUICamera::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_view_controller()) {
      if (view_controller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        view_controller_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    if (has_track()) {
      if (track_ != NULL) track_->::gazebo::msgs::TrackVisual::Clear();
    }
    if (has_projection_type()) {
      if (projection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        projection_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUICamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.GUICamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_view_controller;
        break;
      }

      // optional string view_controller = 2;
      case 2: {
        if (tag == 18) {
         parse_view_controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_controller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_controller().data(), this->view_controller().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "view_controller");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_track;
        break;
      }

      // optional .gazebo.msgs.TrackVisual track = 4;
      case 4: {
        if (tag == 34) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_projection_type;
        break;
      }

      // optional string projection_type = 5;
      case 5: {
        if (tag == 42) {
         parse_projection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projection_type().data(), this->projection_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "projection_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.GUICamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.GUICamera)
  return false;
#undef DO_
}

void GUICamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.GUICamera)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string view_controller = 2;
  if (has_view_controller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_controller().data(), this->view_controller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "view_controller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->view_controller(), output);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }

  // optional .gazebo.msgs.TrackVisual track = 4;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->track(), output);
  }

  // optional string projection_type = 5;
  if (has_projection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_type().data(), this->projection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "projection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->projection_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.GUICamera)
}

::google::protobuf::uint8* GUICamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.GUICamera)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string view_controller = 2;
  if (has_view_controller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_controller().data(), this->view_controller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "view_controller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->view_controller(), target);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }

  // optional .gazebo.msgs.TrackVisual track = 4;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->track(), target);
  }

  // optional string projection_type = 5;
  if (has_projection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection_type().data(), this->projection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "projection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->projection_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.GUICamera)
  return target;
}

int GUICamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string view_controller = 2;
    if (has_view_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_controller());
    }

    // optional .gazebo.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .gazebo.msgs.TrackVisual track = 4;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }

    // optional string projection_type = 5;
    if (has_projection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projection_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUICamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUICamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUICamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUICamera::MergeFrom(const GUICamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_view_controller()) {
      set_view_controller(from.view_controller());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_track()) {
      mutable_track()->::gazebo::msgs::TrackVisual::MergeFrom(from.track());
    }
    if (from.has_projection_type()) {
      set_projection_type(from.projection_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUICamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUICamera::CopyFrom(const GUICamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUICamera::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_track()) {
    if (!this->track().IsInitialized()) return false;
  }
  return true;
}

void GUICamera::Swap(GUICamera* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(view_controller_, other->view_controller_);
    std::swap(pose_, other->pose_);
    std::swap(track_, other->track_);
    std::swap(projection_type_, other->projection_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUICamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUICamera_descriptor_;
  metadata.reflection = GUICamera_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
