// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "diagnostics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Diagnostics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagnostics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Diagnostics_DiagTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Diagnostics_DiagTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_diagnostics_2eproto() {
  protobuf_AddDesc_diagnostics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "diagnostics.proto");
  GOOGLE_CHECK(file != NULL);
  Diagnostics_descriptor_ = file->message_type(0);
  static const int Diagnostics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, real_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, real_time_factor_),
  };
  Diagnostics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diagnostics_descriptor_,
      Diagnostics::default_instance_,
      Diagnostics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diagnostics));
  Diagnostics_DiagTime_descriptor_ = Diagnostics_descriptor_->nested_type(0);
  static const int Diagnostics_DiagTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, wall_),
  };
  Diagnostics_DiagTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Diagnostics_DiagTime_descriptor_,
      Diagnostics_DiagTime::default_instance_,
      Diagnostics_DiagTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Diagnostics_DiagTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Diagnostics_DiagTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_diagnostics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diagnostics_descriptor_, &Diagnostics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Diagnostics_DiagTime_descriptor_, &Diagnostics_DiagTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_diagnostics_2eproto() {
  delete Diagnostics::default_instance_;
  delete Diagnostics_reflection_;
  delete Diagnostics_DiagTime::default_instance_;
  delete Diagnostics_DiagTime_reflection_;
}

void protobuf_AddDesc_diagnostics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021diagnostics.proto\022\013gazebo.msgs\032\ntime.p"
    "roto\"\202\002\n\013Diagnostics\022/\n\004time\030\001 \003(\0132!.gaz"
    "ebo.msgs.Diagnostics.DiagTime\022$\n\treal_ti"
    "me\030\002 \002(\0132\021.gazebo.msgs.Time\022#\n\010sim_time\030"
    "\003 \002(\0132\021.gazebo.msgs.Time\022\030\n\020real_time_fa"
    "ctor\030\004 \002(\001\032]\n\010DiagTime\022\014\n\004name\030\001 \002(\t\022\"\n\007"
    "elapsed\030\002 \002(\0132\021.gazebo.msgs.Time\022\037\n\004wall"
    "\030\003 \002(\0132\021.gazebo.msgs.Time", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diagnostics.proto", &protobuf_RegisterTypes);
  Diagnostics::default_instance_ = new Diagnostics();
  Diagnostics_DiagTime::default_instance_ = new Diagnostics_DiagTime();
  Diagnostics::default_instance_->InitAsDefaultInstance();
  Diagnostics_DiagTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_diagnostics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_diagnostics_2eproto {
  StaticDescriptorInitializer_diagnostics_2eproto() {
    protobuf_AddDesc_diagnostics_2eproto();
  }
} static_descriptor_initializer_diagnostics_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Diagnostics_DiagTime::kNameFieldNumber;
const int Diagnostics_DiagTime::kElapsedFieldNumber;
const int Diagnostics_DiagTime::kWallFieldNumber;
#endif  // !_MSC_VER

Diagnostics_DiagTime::Diagnostics_DiagTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::InitAsDefaultInstance() {
  elapsed_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  wall_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Diagnostics_DiagTime::Diagnostics_DiagTime(const Diagnostics_DiagTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elapsed_ = NULL;
  wall_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diagnostics_DiagTime::~Diagnostics_DiagTime() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Diagnostics.DiagTime)
  SharedDtor();
}

void Diagnostics_DiagTime::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete elapsed_;
    delete wall_;
  }
}

void Diagnostics_DiagTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnostics_DiagTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostics_DiagTime_descriptor_;
}

const Diagnostics_DiagTime& Diagnostics_DiagTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diagnostics_2eproto();
  return *default_instance_;
}

Diagnostics_DiagTime* Diagnostics_DiagTime::default_instance_ = NULL;

Diagnostics_DiagTime* Diagnostics_DiagTime::New() const {
  return new Diagnostics_DiagTime;
}

void Diagnostics_DiagTime::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_elapsed()) {
      if (elapsed_ != NULL) elapsed_->::gazebo::msgs::Time::Clear();
    }
    if (has_wall()) {
      if (wall_ != NULL) wall_->::gazebo::msgs::Time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diagnostics_DiagTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Diagnostics.DiagTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_elapsed;
        break;
      }

      // required .gazebo.msgs.Time elapsed = 2;
      case 2: {
        if (tag == 18) {
         parse_elapsed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elapsed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wall;
        break;
      }

      // required .gazebo.msgs.Time wall = 3;
      case 3: {
        if (tag == 26) {
         parse_wall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Diagnostics.DiagTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Diagnostics.DiagTime)
  return false;
#undef DO_
}

void Diagnostics_DiagTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Diagnostics.DiagTime)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .gazebo.msgs.Time elapsed = 2;
  if (has_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->elapsed(), output);
  }

  // required .gazebo.msgs.Time wall = 3;
  if (has_wall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Diagnostics.DiagTime)
}

::google::protobuf::uint8* Diagnostics_DiagTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Diagnostics.DiagTime)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .gazebo.msgs.Time elapsed = 2;
  if (has_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->elapsed(), target);
  }

  // required .gazebo.msgs.Time wall = 3;
  if (has_wall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Diagnostics.DiagTime)
  return target;
}

int Diagnostics_DiagTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .gazebo.msgs.Time elapsed = 2;
    if (has_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elapsed());
    }

    // required .gazebo.msgs.Time wall = 3;
    if (has_wall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wall());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnostics_DiagTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diagnostics_DiagTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diagnostics_DiagTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diagnostics_DiagTime::MergeFrom(const Diagnostics_DiagTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_elapsed()) {
      mutable_elapsed()->::gazebo::msgs::Time::MergeFrom(from.elapsed());
    }
    if (from.has_wall()) {
      mutable_wall()->::gazebo::msgs::Time::MergeFrom(from.wall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diagnostics_DiagTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics_DiagTime::CopyFrom(const Diagnostics_DiagTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics_DiagTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_elapsed()) {
    if (!this->elapsed().IsInitialized()) return false;
  }
  if (has_wall()) {
    if (!this->wall().IsInitialized()) return false;
  }
  return true;
}

void Diagnostics_DiagTime::Swap(Diagnostics_DiagTime* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(elapsed_, other->elapsed_);
    std::swap(wall_, other->wall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diagnostics_DiagTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagnostics_DiagTime_descriptor_;
  metadata.reflection = Diagnostics_DiagTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Diagnostics::kTimeFieldNumber;
const int Diagnostics::kRealTimeFieldNumber;
const int Diagnostics::kSimTimeFieldNumber;
const int Diagnostics::kRealTimeFactorFieldNumber;
#endif  // !_MSC_VER

Diagnostics::Diagnostics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Diagnostics)
}

void Diagnostics::InitAsDefaultInstance() {
  real_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  sim_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Diagnostics::Diagnostics(const Diagnostics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Diagnostics)
}

void Diagnostics::SharedCtor() {
  _cached_size_ = 0;
  real_time_ = NULL;
  sim_time_ = NULL;
  real_time_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Diagnostics)
  SharedDtor();
}

void Diagnostics::SharedDtor() {
  if (this != default_instance_) {
    delete real_time_;
    delete sim_time_;
  }
}

void Diagnostics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnostics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Diagnostics_descriptor_;
}

const Diagnostics& Diagnostics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diagnostics_2eproto();
  return *default_instance_;
}

Diagnostics* Diagnostics::default_instance_ = NULL;

Diagnostics* Diagnostics::New() const {
  return new Diagnostics;
}

void Diagnostics::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_real_time()) {
      if (real_time_ != NULL) real_time_->::gazebo::msgs::Time::Clear();
    }
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::gazebo::msgs::Time::Clear();
    }
    real_time_factor_ = 0;
  }
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Diagnostics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Diagnostics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
      case 1: {
        if (tag == 10) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_time;
        if (input->ExpectTag(18)) goto parse_real_time;
        break;
      }

      // required .gazebo.msgs.Time real_time = 2;
      case 2: {
        if (tag == 18) {
         parse_real_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sim_time;
        break;
      }

      // required .gazebo.msgs.Time sim_time = 3;
      case 3: {
        if (tag == 26) {
         parse_sim_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_real_time_factor;
        break;
      }

      // required double real_time_factor = 4;
      case 4: {
        if (tag == 33) {
         parse_real_time_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_factor_)));
          set_has_real_time_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Diagnostics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Diagnostics)
  return false;
#undef DO_
}

void Diagnostics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Diagnostics)
  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(i), output);
  }

  // required .gazebo.msgs.Time real_time = 2;
  if (has_real_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->real_time(), output);
  }

  // required .gazebo.msgs.Time sim_time = 3;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sim_time(), output);
  }

  // required double real_time_factor = 4;
  if (has_real_time_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->real_time_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Diagnostics)
}

::google::protobuf::uint8* Diagnostics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Diagnostics)
  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(i), target);
  }

  // required .gazebo.msgs.Time real_time = 2;
  if (has_real_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->real_time(), target);
  }

  // required .gazebo.msgs.Time sim_time = 3;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sim_time(), target);
  }

  // required double real_time_factor = 4;
  if (has_real_time_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->real_time_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Diagnostics)
  return target;
}

int Diagnostics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .gazebo.msgs.Time real_time = 2;
    if (has_real_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_time());
    }

    // required .gazebo.msgs.Time sim_time = 3;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sim_time());
    }

    // required double real_time_factor = 4;
    if (has_real_time_factor()) {
      total_size += 1 + 8;
    }

  }
  // repeated .gazebo.msgs.Diagnostics.DiagTime time = 1;
  total_size += 1 * this->time_size();
  for (int i = 0; i < this->time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnostics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Diagnostics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Diagnostics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_.MergeFrom(from.time_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_real_time()) {
      mutable_real_time()->::gazebo::msgs::Time::MergeFrom(from.real_time());
    }
    if (from.has_sim_time()) {
      mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_real_time_factor()) {
      set_real_time_factor(from.real_time_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Diagnostics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->time())) return false;
  if (has_real_time()) {
    if (!this->real_time().IsInitialized()) return false;
  }
  if (has_sim_time()) {
    if (!this->sim_time().IsInitialized()) return false;
  }
  return true;
}

void Diagnostics::Swap(Diagnostics* other) {
  if (other != this) {
    time_.Swap(&other->time_);
    std::swap(real_time_, other->real_time_);
    std::swap(sim_time_, other->sim_time_);
    std::swap(real_time_factor_, other->real_time_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Diagnostics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Diagnostics_descriptor_;
  metadata.reflection = Diagnostics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
