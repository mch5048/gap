// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual_utils_request.proto

#ifndef PROTOBUF_visual_5futils_5frequest_2eproto__INCLUDED
#define PROTOBUF_visual_5futils_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_visual_5futils_5frequest_2eproto();
void protobuf_AssignDesc_visual_5futils_5frequest_2eproto();
void protobuf_ShutdownFile_visual_5futils_5frequest_2eproto();

class VisualUtilsRequest;

enum VisualUtilsRequest_Type {
  VisualUtilsRequest_Type_UPDATE = 1,
  VisualUtilsRequest_Type_DEFAULT_POSE = 2
};
bool VisualUtilsRequest_Type_IsValid(int value);
const VisualUtilsRequest_Type VisualUtilsRequest_Type_Type_MIN = VisualUtilsRequest_Type_UPDATE;
const VisualUtilsRequest_Type VisualUtilsRequest_Type_Type_MAX = VisualUtilsRequest_Type_DEFAULT_POSE;
const int VisualUtilsRequest_Type_Type_ARRAYSIZE = VisualUtilsRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisualUtilsRequest_Type_descriptor();
inline const ::std::string& VisualUtilsRequest_Type_Name(VisualUtilsRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisualUtilsRequest_Type_descriptor(), value);
}
inline bool VisualUtilsRequest_Type_Parse(
    const ::std::string& name, VisualUtilsRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisualUtilsRequest_Type>(
    VisualUtilsRequest_Type_descriptor(), name, value);
}
// ===================================================================

class VisualUtilsRequest : public ::google::protobuf::Message {
 public:
  VisualUtilsRequest();
  virtual ~VisualUtilsRequest();

  VisualUtilsRequest(const VisualUtilsRequest& from);

  inline VisualUtilsRequest& operator=(const VisualUtilsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualUtilsRequest& default_instance();

  void Swap(VisualUtilsRequest* other);

  // implements Message ----------------------------------------------

  VisualUtilsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualUtilsRequest& from);
  void MergeFrom(const VisualUtilsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VisualUtilsRequest_Type Type;
  static const Type UPDATE = VisualUtilsRequest_Type_UPDATE;
  static const Type DEFAULT_POSE = VisualUtilsRequest_Type_DEFAULT_POSE;
  static inline bool Type_IsValid(int value) {
    return VisualUtilsRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    VisualUtilsRequest_Type_Type_MIN;
  static const Type Type_MAX =
    VisualUtilsRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    VisualUtilsRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return VisualUtilsRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return VisualUtilsRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return VisualUtilsRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gap.msgs.VisualUtilsRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gap::msgs::VisualUtilsRequest_Type type() const;
  inline void set_type(::gap::msgs::VisualUtilsRequest_Type value);

  // repeated string targets = 2;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 2;
  inline const ::std::string& targets(int index) const;
  inline ::std::string* mutable_targets(int index);
  inline void set_targets(int index, const ::std::string& value);
  inline void set_targets(int index, const char* value);
  inline void set_targets(int index, const char* value, size_t size);
  inline ::std::string* add_targets();
  inline void add_targets(const ::std::string& value);
  inline void add_targets(const char* value);
  inline void add_targets(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_targets();

  // repeated .gazebo.msgs.Pose poses = 3;
  inline int poses_size() const;
  inline void clear_poses();
  static const int kPosesFieldNumber = 3;
  inline const ::gazebo::msgs::Pose& poses(int index) const;
  inline ::gazebo::msgs::Pose* mutable_poses(int index);
  inline ::gazebo::msgs::Pose* add_poses();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >&
      poses() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >*
      mutable_poses();

  // repeated .gazebo.msgs.Vector3d scale = 4;
  inline int scale_size() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 4;
  inline const ::gazebo::msgs::Vector3d& scale(int index) const;
  inline ::gazebo::msgs::Vector3d* mutable_scale(int index);
  inline ::gazebo::msgs::Vector3d* add_scale();
  inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
      scale() const;
  inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
      mutable_scale();

  // @@protoc_insertion_point(class_scope:gap.msgs.VisualUtilsRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> targets_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose > poses_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d > scale_;
  int type_;
  friend void  protobuf_AddDesc_visual_5futils_5frequest_2eproto();
  friend void protobuf_AssignDesc_visual_5futils_5frequest_2eproto();
  friend void protobuf_ShutdownFile_visual_5futils_5frequest_2eproto();

  void InitAsDefaultInstance();
  static VisualUtilsRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// VisualUtilsRequest

// optional .gap.msgs.VisualUtilsRequest.Type type = 1;
inline bool VisualUtilsRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualUtilsRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisualUtilsRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisualUtilsRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gap::msgs::VisualUtilsRequest_Type VisualUtilsRequest::type() const {
  // @@protoc_insertion_point(field_get:gap.msgs.VisualUtilsRequest.type)
  return static_cast< ::gap::msgs::VisualUtilsRequest_Type >(type_);
}
inline void VisualUtilsRequest::set_type(::gap::msgs::VisualUtilsRequest_Type value) {
  assert(::gap::msgs::VisualUtilsRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.VisualUtilsRequest.type)
}

// repeated string targets = 2;
inline int VisualUtilsRequest::targets_size() const {
  return targets_.size();
}
inline void VisualUtilsRequest::clear_targets() {
  targets_.Clear();
}
inline const ::std::string& VisualUtilsRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.VisualUtilsRequest.targets)
  return targets_.Get(index);
}
inline ::std::string* VisualUtilsRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.VisualUtilsRequest.targets)
  return targets_.Mutable(index);
}
inline void VisualUtilsRequest::set_targets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gap.msgs.VisualUtilsRequest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void VisualUtilsRequest::set_targets(int index, const char* value) {
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.VisualUtilsRequest.targets)
}
inline void VisualUtilsRequest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.VisualUtilsRequest.targets)
}
inline ::std::string* VisualUtilsRequest::add_targets() {
  return targets_.Add();
}
inline void VisualUtilsRequest::add_targets(const ::std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gap.msgs.VisualUtilsRequest.targets)
}
inline void VisualUtilsRequest::add_targets(const char* value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gap.msgs.VisualUtilsRequest.targets)
}
inline void VisualUtilsRequest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gap.msgs.VisualUtilsRequest.targets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VisualUtilsRequest::targets() const {
  // @@protoc_insertion_point(field_list:gap.msgs.VisualUtilsRequest.targets)
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VisualUtilsRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.VisualUtilsRequest.targets)
  return &targets_;
}

// repeated .gazebo.msgs.Pose poses = 3;
inline int VisualUtilsRequest::poses_size() const {
  return poses_.size();
}
inline void VisualUtilsRequest::clear_poses() {
  poses_.Clear();
}
inline const ::gazebo::msgs::Pose& VisualUtilsRequest::poses(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.VisualUtilsRequest.poses)
  return poses_.Get(index);
}
inline ::gazebo::msgs::Pose* VisualUtilsRequest::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.VisualUtilsRequest.poses)
  return poses_.Mutable(index);
}
inline ::gazebo::msgs::Pose* VisualUtilsRequest::add_poses() {
  // @@protoc_insertion_point(field_add:gap.msgs.VisualUtilsRequest.poses)
  return poses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >&
VisualUtilsRequest::poses() const {
  // @@protoc_insertion_point(field_list:gap.msgs.VisualUtilsRequest.poses)
  return poses_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Pose >*
VisualUtilsRequest::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.VisualUtilsRequest.poses)
  return &poses_;
}

// repeated .gazebo.msgs.Vector3d scale = 4;
inline int VisualUtilsRequest::scale_size() const {
  return scale_.size();
}
inline void VisualUtilsRequest::clear_scale() {
  scale_.Clear();
}
inline const ::gazebo::msgs::Vector3d& VisualUtilsRequest::scale(int index) const {
  // @@protoc_insertion_point(field_get:gap.msgs.VisualUtilsRequest.scale)
  return scale_.Get(index);
}
inline ::gazebo::msgs::Vector3d* VisualUtilsRequest::mutable_scale(int index) {
  // @@protoc_insertion_point(field_mutable:gap.msgs.VisualUtilsRequest.scale)
  return scale_.Mutable(index);
}
inline ::gazebo::msgs::Vector3d* VisualUtilsRequest::add_scale() {
  // @@protoc_insertion_point(field_add:gap.msgs.VisualUtilsRequest.scale)
  return scale_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
VisualUtilsRequest::scale() const {
  // @@protoc_insertion_point(field_list:gap.msgs.VisualUtilsRequest.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
VisualUtilsRequest::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:gap.msgs.VisualUtilsRequest.scale)
  return &scale_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gap::msgs::VisualUtilsRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gap::msgs::VisualUtilsRequest_Type>() {
  return ::gap::msgs::VisualUtilsRequest_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_visual_5futils_5frequest_2eproto__INCLUDED
