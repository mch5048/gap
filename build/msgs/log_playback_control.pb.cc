// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_playback_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_playback_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* LogPlaybackControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlaybackControl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5fplayback_5fcontrol_2eproto() {
  protobuf_AddDesc_log_5fplayback_5fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_playback_control.proto");
  GOOGLE_CHECK(file != NULL);
  LogPlaybackControl_descriptor_ = file->message_type(0);
  static const int LogPlaybackControl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, multi_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, rewind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, seek_),
  };
  LogPlaybackControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlaybackControl_descriptor_,
      LogPlaybackControl::default_instance_,
      LogPlaybackControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlaybackControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlaybackControl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5fplayback_5fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlaybackControl_descriptor_, &LogPlaybackControl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5fplayback_5fcontrol_2eproto() {
  delete LogPlaybackControl::default_instance_;
  delete LogPlaybackControl_reflection_;
}

void protobuf_AddDesc_log_5fplayback_5fcontrol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032log_playback_control.proto\022\013gazebo.msg"
    "s\032\ntime.proto\"y\n\022LogPlaybackControl\022\r\n\005p"
    "ause\030\001 \001(\010\022\022\n\nmulti_step\030\002 \001(\021\022\016\n\006rewind"
    "\030\003 \001(\010\022\017\n\007forward\030\004 \001(\010\022\037\n\004seek\030\005 \001(\0132\021."
    "gazebo.msgs.Time", 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_playback_control.proto", &protobuf_RegisterTypes);
  LogPlaybackControl::default_instance_ = new LogPlaybackControl();
  LogPlaybackControl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5fplayback_5fcontrol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5fplayback_5fcontrol_2eproto {
  StaticDescriptorInitializer_log_5fplayback_5fcontrol_2eproto() {
    protobuf_AddDesc_log_5fplayback_5fcontrol_2eproto();
  }
} static_descriptor_initializer_log_5fplayback_5fcontrol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogPlaybackControl::kPauseFieldNumber;
const int LogPlaybackControl::kMultiStepFieldNumber;
const int LogPlaybackControl::kRewindFieldNumber;
const int LogPlaybackControl::kForwardFieldNumber;
const int LogPlaybackControl::kSeekFieldNumber;
#endif  // !_MSC_VER

LogPlaybackControl::LogPlaybackControl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogPlaybackControl)
}

void LogPlaybackControl::InitAsDefaultInstance() {
  seek_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

LogPlaybackControl::LogPlaybackControl(const LogPlaybackControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogPlaybackControl)
}

void LogPlaybackControl::SharedCtor() {
  _cached_size_ = 0;
  pause_ = false;
  multi_step_ = 0;
  rewind_ = false;
  forward_ = false;
  seek_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlaybackControl::~LogPlaybackControl() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogPlaybackControl)
  SharedDtor();
}

void LogPlaybackControl::SharedDtor() {
  if (this != default_instance_) {
    delete seek_;
  }
}

void LogPlaybackControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlaybackControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlaybackControl_descriptor_;
}

const LogPlaybackControl& LogPlaybackControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fplayback_5fcontrol_2eproto();
  return *default_instance_;
}

LogPlaybackControl* LogPlaybackControl::default_instance_ = NULL;

LogPlaybackControl* LogPlaybackControl::New() const {
  return new LogPlaybackControl;
}

void LogPlaybackControl::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogPlaybackControl*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(multi_step_, forward_);
    if (has_seek()) {
      if (seek_ != NULL) seek_->::gazebo::msgs::Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlaybackControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.LogPlaybackControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool pause = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pause_)));
          set_has_pause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_multi_step;
        break;
      }

      // optional sint32 multi_step = 2;
      case 2: {
        if (tag == 16) {
         parse_multi_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &multi_step_)));
          set_has_multi_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewind;
        break;
      }

      // optional bool rewind = 3;
      case 3: {
        if (tag == 24) {
         parse_rewind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewind_)));
          set_has_rewind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forward;
        break;
      }

      // optional bool forward = 4;
      case 4: {
        if (tag == 32) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
          set_has_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seek;
        break;
      }

      // optional .gazebo.msgs.Time seek = 5;
      case 5: {
        if (tag == 42) {
         parse_seek:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seek()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.LogPlaybackControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.LogPlaybackControl)
  return false;
#undef DO_
}

void LogPlaybackControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.LogPlaybackControl)
  // optional bool pause = 1;
  if (has_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pause(), output);
  }

  // optional sint32 multi_step = 2;
  if (has_multi_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->multi_step(), output);
  }

  // optional bool rewind = 3;
  if (has_rewind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rewind(), output);
  }

  // optional bool forward = 4;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->forward(), output);
  }

  // optional .gazebo.msgs.Time seek = 5;
  if (has_seek()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seek(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.LogPlaybackControl)
}

::google::protobuf::uint8* LogPlaybackControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogPlaybackControl)
  // optional bool pause = 1;
  if (has_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pause(), target);
  }

  // optional sint32 multi_step = 2;
  if (has_multi_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->multi_step(), target);
  }

  // optional bool rewind = 3;
  if (has_rewind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rewind(), target);
  }

  // optional bool forward = 4;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->forward(), target);
  }

  // optional .gazebo.msgs.Time seek = 5;
  if (has_seek()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->seek(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogPlaybackControl)
  return target;
}

int LogPlaybackControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool pause = 1;
    if (has_pause()) {
      total_size += 1 + 1;
    }

    // optional sint32 multi_step = 2;
    if (has_multi_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->multi_step());
    }

    // optional bool rewind = 3;
    if (has_rewind()) {
      total_size += 1 + 1;
    }

    // optional bool forward = 4;
    if (has_forward()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Time seek = 5;
    if (has_seek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seek());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlaybackControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlaybackControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlaybackControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlaybackControl::MergeFrom(const LogPlaybackControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pause()) {
      set_pause(from.pause());
    }
    if (from.has_multi_step()) {
      set_multi_step(from.multi_step());
    }
    if (from.has_rewind()) {
      set_rewind(from.rewind());
    }
    if (from.has_forward()) {
      set_forward(from.forward());
    }
    if (from.has_seek()) {
      mutable_seek()->::gazebo::msgs::Time::MergeFrom(from.seek());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlaybackControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlaybackControl::CopyFrom(const LogPlaybackControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlaybackControl::IsInitialized() const {

  if (has_seek()) {
    if (!this->seek().IsInitialized()) return false;
  }
  return true;
}

void LogPlaybackControl::Swap(LogPlaybackControl* other) {
  if (other != this) {
    std::swap(pause_, other->pause_);
    std::swap(multi_step_, other->multi_step_);
    std::swap(rewind_, other->rewind_);
    std::swap(forward_, other->forward_);
    std::swap(seek_, other->seek_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlaybackControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlaybackControl_descriptor_;
  metadata.reflection = LogPlaybackControl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
