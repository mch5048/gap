// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camerasensor.proto

#ifndef PROTOBUF_camerasensor_2eproto__INCLUDED
#define PROTOBUF_camerasensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
#include "distortion.pb.h"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camerasensor_2eproto();
void protobuf_AssignDesc_camerasensor_2eproto();
void protobuf_ShutdownFile_camerasensor_2eproto();

class CameraSensor;

// ===================================================================

class CameraSensor : public ::google::protobuf::Message {
 public:
  CameraSensor();
  virtual ~CameraSensor();

  CameraSensor(const CameraSensor& from);

  inline CameraSensor& operator=(const CameraSensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSensor& default_instance();

  void Swap(CameraSensor* other);

  // implements Message ----------------------------------------------

  CameraSensor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraSensor& from);
  void MergeFrom(const CameraSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double horizontal_fov = 1;
  inline bool has_horizontal_fov() const;
  inline void clear_horizontal_fov();
  static const int kHorizontalFovFieldNumber = 1;
  inline double horizontal_fov() const;
  inline void set_horizontal_fov(double value);

  // optional .gazebo.msgs.Vector2d image_size = 2;
  inline bool has_image_size() const;
  inline void clear_image_size();
  static const int kImageSizeFieldNumber = 2;
  inline const ::gazebo::msgs::Vector2d& image_size() const;
  inline ::gazebo::msgs::Vector2d* mutable_image_size();
  inline ::gazebo::msgs::Vector2d* release_image_size();
  inline void set_allocated_image_size(::gazebo::msgs::Vector2d* image_size);

  // optional string image_format = 3;
  inline bool has_image_format() const;
  inline void clear_image_format();
  static const int kImageFormatFieldNumber = 3;
  inline const ::std::string& image_format() const;
  inline void set_image_format(const ::std::string& value);
  inline void set_image_format(const char* value);
  inline void set_image_format(const char* value, size_t size);
  inline ::std::string* mutable_image_format();
  inline ::std::string* release_image_format();
  inline void set_allocated_image_format(::std::string* image_format);

  // optional double near_clip = 4;
  inline bool has_near_clip() const;
  inline void clear_near_clip();
  static const int kNearClipFieldNumber = 4;
  inline double near_clip() const;
  inline void set_near_clip(double value);

  // optional double far_clip = 5;
  inline bool has_far_clip() const;
  inline void clear_far_clip();
  static const int kFarClipFieldNumber = 5;
  inline double far_clip() const;
  inline void set_far_clip(double value);

  // optional bool save_enabled = 6;
  inline bool has_save_enabled() const;
  inline void clear_save_enabled();
  static const int kSaveEnabledFieldNumber = 6;
  inline bool save_enabled() const;
  inline void set_save_enabled(bool value);

  // optional string save_path = 7;
  inline bool has_save_path() const;
  inline void clear_save_path();
  static const int kSavePathFieldNumber = 7;
  inline const ::std::string& save_path() const;
  inline void set_save_path(const ::std::string& value);
  inline void set_save_path(const char* value);
  inline void set_save_path(const char* value, size_t size);
  inline ::std::string* mutable_save_path();
  inline ::std::string* release_save_path();
  inline void set_allocated_save_path(::std::string* save_path);

  // optional .gazebo.msgs.Distortion distortion = 8;
  inline bool has_distortion() const;
  inline void clear_distortion();
  static const int kDistortionFieldNumber = 8;
  inline const ::gazebo::msgs::Distortion& distortion() const;
  inline ::gazebo::msgs::Distortion* mutable_distortion();
  inline ::gazebo::msgs::Distortion* release_distortion();
  inline void set_allocated_distortion(::gazebo::msgs::Distortion* distortion);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.CameraSensor)
 private:
  inline void set_has_horizontal_fov();
  inline void clear_has_horizontal_fov();
  inline void set_has_image_size();
  inline void clear_has_image_size();
  inline void set_has_image_format();
  inline void clear_has_image_format();
  inline void set_has_near_clip();
  inline void clear_has_near_clip();
  inline void set_has_far_clip();
  inline void clear_has_far_clip();
  inline void set_has_save_enabled();
  inline void clear_has_save_enabled();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_distortion();
  inline void clear_has_distortion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double horizontal_fov_;
  ::gazebo::msgs::Vector2d* image_size_;
  ::std::string* image_format_;
  double near_clip_;
  double far_clip_;
  ::std::string* save_path_;
  ::gazebo::msgs::Distortion* distortion_;
  bool save_enabled_;
  friend void  protobuf_AddDesc_camerasensor_2eproto();
  friend void protobuf_AssignDesc_camerasensor_2eproto();
  friend void protobuf_ShutdownFile_camerasensor_2eproto();

  void InitAsDefaultInstance();
  static CameraSensor* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraSensor

// optional double horizontal_fov = 1;
inline bool CameraSensor::has_horizontal_fov() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraSensor::set_has_horizontal_fov() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraSensor::clear_has_horizontal_fov() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
  clear_has_horizontal_fov();
}
inline double CameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.horizontal_fov)
  return horizontal_fov_;
}
inline void CameraSensor::set_horizontal_fov(double value) {
  set_has_horizontal_fov();
  horizontal_fov_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.horizontal_fov)
}

// optional .gazebo.msgs.Vector2d image_size = 2;
inline bool CameraSensor::has_image_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraSensor::set_has_image_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraSensor::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraSensor::clear_image_size() {
  if (image_size_ != NULL) image_size_->::gazebo::msgs::Vector2d::Clear();
  clear_has_image_size();
}
inline const ::gazebo::msgs::Vector2d& CameraSensor::image_size() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.image_size)
  return image_size_ != NULL ? *image_size_ : *default_instance_->image_size_;
}
inline ::gazebo::msgs::Vector2d* CameraSensor::mutable_image_size() {
  set_has_image_size();
  if (image_size_ == NULL) image_size_ = new ::gazebo::msgs::Vector2d;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.image_size)
  return image_size_;
}
inline ::gazebo::msgs::Vector2d* CameraSensor::release_image_size() {
  clear_has_image_size();
  ::gazebo::msgs::Vector2d* temp = image_size_;
  image_size_ = NULL;
  return temp;
}
inline void CameraSensor::set_allocated_image_size(::gazebo::msgs::Vector2d* image_size) {
  delete image_size_;
  image_size_ = image_size;
  if (image_size) {
    set_has_image_size();
  } else {
    clear_has_image_size();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.image_size)
}

// optional string image_format = 3;
inline bool CameraSensor::has_image_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraSensor::set_has_image_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraSensor::clear_has_image_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraSensor::clear_image_format() {
  if (image_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_format_->clear();
  }
  clear_has_image_format();
}
inline const ::std::string& CameraSensor::image_format() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.image_format)
  return *image_format_;
}
inline void CameraSensor::set_image_format(const ::std::string& value) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value, size_t size) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.CameraSensor.image_format)
}
inline ::std::string* CameraSensor::mutable_image_format() {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.image_format)
  return image_format_;
}
inline ::std::string* CameraSensor::release_image_format() {
  clear_has_image_format();
  if (image_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_format_;
    image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraSensor::set_allocated_image_format(::std::string* image_format) {
  if (image_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_format_;
  }
  if (image_format) {
    set_has_image_format();
    image_format_ = image_format;
  } else {
    clear_has_image_format();
    image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.image_format)
}

// optional double near_clip = 4;
inline bool CameraSensor::has_near_clip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraSensor::set_has_near_clip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraSensor::clear_has_near_clip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraSensor::clear_near_clip() {
  near_clip_ = 0;
  clear_has_near_clip();
}
inline double CameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.near_clip)
  return near_clip_;
}
inline void CameraSensor::set_near_clip(double value) {
  set_has_near_clip();
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.near_clip)
}

// optional double far_clip = 5;
inline bool CameraSensor::has_far_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraSensor::set_has_far_clip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraSensor::clear_has_far_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraSensor::clear_far_clip() {
  far_clip_ = 0;
  clear_has_far_clip();
}
inline double CameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.far_clip)
  return far_clip_;
}
inline void CameraSensor::set_far_clip(double value) {
  set_has_far_clip();
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.far_clip)
}

// optional bool save_enabled = 6;
inline bool CameraSensor::has_save_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraSensor::set_has_save_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraSensor::clear_has_save_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraSensor::clear_save_enabled() {
  save_enabled_ = false;
  clear_has_save_enabled();
}
inline bool CameraSensor::save_enabled() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.save_enabled)
  return save_enabled_;
}
inline void CameraSensor::set_save_enabled(bool value) {
  set_has_save_enabled();
  save_enabled_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.save_enabled)
}

// optional string save_path = 7;
inline bool CameraSensor::has_save_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraSensor::set_has_save_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraSensor::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraSensor::clear_save_path() {
  if (save_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_path_->clear();
  }
  clear_has_save_path();
}
inline const ::std::string& CameraSensor::save_path() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.save_path)
  return *save_path_;
}
inline void CameraSensor::set_save_path(const ::std::string& value) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.CameraSensor.save_path)
}
inline ::std::string* CameraSensor::mutable_save_path() {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.save_path)
  return save_path_;
}
inline ::std::string* CameraSensor::release_save_path() {
  clear_has_save_path();
  if (save_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = save_path_;
    save_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraSensor::set_allocated_save_path(::std::string* save_path) {
  if (save_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete save_path_;
  }
  if (save_path) {
    set_has_save_path();
    save_path_ = save_path;
  } else {
    clear_has_save_path();
    save_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.save_path)
}

// optional .gazebo.msgs.Distortion distortion = 8;
inline bool CameraSensor::has_distortion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraSensor::set_has_distortion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraSensor::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraSensor::clear_distortion() {
  if (distortion_ != NULL) distortion_->::gazebo::msgs::Distortion::Clear();
  clear_has_distortion();
}
inline const ::gazebo::msgs::Distortion& CameraSensor::distortion() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.CameraSensor.distortion)
  return distortion_ != NULL ? *distortion_ : *default_instance_->distortion_;
}
inline ::gazebo::msgs::Distortion* CameraSensor::mutable_distortion() {
  set_has_distortion();
  if (distortion_ == NULL) distortion_ = new ::gazebo::msgs::Distortion;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.CameraSensor.distortion)
  return distortion_;
}
inline ::gazebo::msgs::Distortion* CameraSensor::release_distortion() {
  clear_has_distortion();
  ::gazebo::msgs::Distortion* temp = distortion_;
  distortion_ = NULL;
  return temp;
}
inline void CameraSensor::set_allocated_distortion(::gazebo::msgs::Distortion* distortion) {
  delete distortion_;
  distortion_ = distortion;
  if (distortion) {
    set_has_distortion();
  } else {
    clear_has_distortion();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.CameraSensor.distortion)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camerasensor_2eproto__INCLUDED
