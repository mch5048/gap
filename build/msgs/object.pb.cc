// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Object_ModelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  Object_descriptor_ = file->message_type(0);
  static const int Object_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, texture_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, texture_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, box_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, sdf_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  Object_ModelType_descriptor_ = Object_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete Object::default_instance_;
  delete Object_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\022\010gap.msgs\032\npose.proto\032\016ve"
    "ctor3d.proto\"\317\002\n\006Object\022.\n\nmodel_type\030\001 "
    "\001(\0162\032.gap.msgs.Object.ModelType\022\014\n\004name\030"
    "\002 \001(\t\022\037\n\004pose\030\003 \001(\0132\021.gazebo.msgs.Pose\022\014"
    "\n\004mass\030\005 \001(\001\022\023\n\013texture_uri\030\006 \001(\t\022\024\n\014tex"
    "ture_name\030\007 \001(\t\022\016\n\006radius\030\010 \001(\001\022\016\n\006lengt"
    "h\030\t \001(\001\022\'\n\010box_size\030\n \001(\0132\025.gazebo.msgs."
    "Vector3d\022\013\n\003sdf\030\013 \001(\t\"W\n\tModelType\022\n\n\006SP"
    "HERE\020\001\022\014\n\010CYLINDER\020\002\022\007\n\003BOX\020\003\022\n\n\006CUSTOM\020"
    "\004\022\020\n\014CUSTOM_LIGHT\020\005\022\t\n\005MODEL\020\006", 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  Object::default_instance_ = new Object();
  Object::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Object_ModelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_ModelType_descriptor_;
}
bool Object_ModelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Object_ModelType Object::SPHERE;
const Object_ModelType Object::CYLINDER;
const Object_ModelType Object::BOX;
const Object_ModelType Object::CUSTOM;
const Object_ModelType Object::CUSTOM_LIGHT;
const Object_ModelType Object::MODEL;
const Object_ModelType Object::ModelType_MIN;
const Object_ModelType Object::ModelType_MAX;
const int Object::ModelType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Object::kModelTypeFieldNumber;
const int Object::kNameFieldNumber;
const int Object::kPoseFieldNumber;
const int Object::kMassFieldNumber;
const int Object::kTextureUriFieldNumber;
const int Object::kTextureNameFieldNumber;
const int Object::kRadiusFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kBoxSizeFieldNumber;
const int Object::kSdfFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gap.msgs.Object)
}

void Object::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  box_size_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gap.msgs.Object)
}

void Object::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
  mass_ = 0;
  texture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radius_ = 0;
  length_ = 0;
  box_size_ = NULL;
  sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:gap.msgs.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (texture_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete texture_uri_;
  }
  if (texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete texture_name_;
  }
  if (sdf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdf_;
  }
  if (this != default_instance_) {
    delete pose_;
    delete box_size_;
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(radius_, length_);
    model_type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    mass_ = 0;
    if (has_texture_uri()) {
      if (texture_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        texture_uri_->clear();
      }
    }
    if (has_texture_name()) {
      if (texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        texture_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_box_size()) {
      if (box_size_ != NULL) box_size_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_sdf()) {
      if (sdf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sdf_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gap.msgs.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gap.msgs.Object.ModelType model_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gap::msgs::Object_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::gap::msgs::Object_ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_mass;
        break;
      }

      // optional double mass = 5;
      case 5: {
        if (tag == 41) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_texture_uri;
        break;
      }

      // optional string texture_uri = 6;
      case 6: {
        if (tag == 50) {
         parse_texture_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texture_uri().data(), this->texture_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "texture_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_texture_name;
        break;
      }

      // optional string texture_name = 7;
      case 7: {
        if (tag == 58) {
         parse_texture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texture_name().data(), this->texture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "texture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_radius;
        break;
      }

      // optional double radius = 8;
      case 8: {
        if (tag == 65) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_length;
        break;
      }

      // optional double length = 9;
      case 9: {
        if (tag == 73) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_box_size;
        break;
      }

      // optional .gazebo.msgs.Vector3d box_size = 10;
      case 10: {
        if (tag == 82) {
         parse_box_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sdf;
        break;
      }

      // optional string sdf = 11;
      case 11: {
        if (tag == 90) {
         parse_sdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdf().data(), this->sdf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gap.msgs.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gap.msgs.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gap.msgs.Object)
  // optional .gap.msgs.Object.ModelType model_type = 1;
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->model_type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }

  // optional double mass = 5;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->mass(), output);
  }

  // optional string texture_uri = 6;
  if (has_texture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture_uri().data(), this->texture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texture_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->texture_uri(), output);
  }

  // optional string texture_name = 7;
  if (has_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture_name().data(), this->texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->texture_name(), output);
  }

  // optional double radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->radius(), output);
  }

  // optional double length = 9;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  // optional .gazebo.msgs.Vector3d box_size = 10;
  if (has_box_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->box_size(), output);
  }

  // optional string sdf = 11;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gap.msgs.Object)
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gap.msgs.Object)
  // optional .gap.msgs.Object.ModelType model_type = 1;
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->model_type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }

  // optional double mass = 5;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->mass(), target);
  }

  // optional string texture_uri = 6;
  if (has_texture_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture_uri().data(), this->texture_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texture_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->texture_uri(), target);
  }

  // optional string texture_name = 7;
  if (has_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texture_name().data(), this->texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->texture_name(), target);
  }

  // optional double radius = 8;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->radius(), target);
  }

  // optional double length = 9;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  // optional .gazebo.msgs.Vector3d box_size = 10;
  if (has_box_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->box_size(), target);
  }

  // optional string sdf = 11;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sdf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gap.msgs.Object)
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gap.msgs.Object.ModelType model_type = 1;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .gazebo.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional double mass = 5;
    if (has_mass()) {
      total_size += 1 + 8;
    }

    // optional string texture_uri = 6;
    if (has_texture_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture_uri());
    }

    // optional string texture_name = 7;
    if (has_texture_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture_name());
    }

    // optional double radius = 8;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gazebo.msgs.Vector3d box_size = 10;
    if (has_box_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_size());
    }

    // optional string sdf = 11;
    if (has_sdf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_texture_uri()) {
      set_texture_uri(from.texture_uri());
    }
    if (from.has_texture_name()) {
      set_texture_name(from.texture_name());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_box_size()) {
      mutable_box_size()->::gazebo::msgs::Vector3d::MergeFrom(from.box_size());
    }
    if (from.has_sdf()) {
      set_sdf(from.sdf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_box_size()) {
    if (!this->box_size().IsInitialized()) return false;
  }
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(model_type_, other->model_type_);
    std::swap(name_, other->name_);
    std::swap(pose_, other->pose_);
    std::swap(mass_, other->mass_);
    std::swap(texture_uri_, other->texture_uri_);
    std::swap(texture_name_, other->texture_name_);
    std::swap(radius_, other->radius_);
    std::swap(length_, other->length_);
    std::swap(box_size_, other->box_size_);
    std::swap(sdf_, other->sdf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

// @@protoc_insertion_point(global_scope)
