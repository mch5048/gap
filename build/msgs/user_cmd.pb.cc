// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* UserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserCmd_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fcmd_2eproto() {
  protobuf_AddDesc_user_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  UserCmd_descriptor_ = file->message_type(0);
  static const int UserCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, entity_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, world_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, wrench_),
  };
  UserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCmd_descriptor_,
      UserCmd::default_instance_,
      UserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCmd));
  UserCmd_Type_descriptor_ = UserCmd_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCmd_descriptor_, &UserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fcmd_2eproto() {
  delete UserCmd::default_instance_;
  delete UserCmd_reflection_;
}

void protobuf_AddDesc_user_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_light_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_model_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_world_5fcontrol_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_wrench_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016user_cmd.proto\022\013gazebo.msgs\032\013light.pro"
    "to\032\013model.proto\032\023world_control.proto\032\014wr"
    "ench.proto\"\305\002\n\007UserCmd\022\n\n\002id\030\001 \001(\r\022\023\n\013de"
    "scription\030\002 \002(\t\022\'\n\004type\030\003 \002(\0162\031.gazebo.m"
    "sgs.UserCmd.Type\022!\n\005model\030\004 \003(\0132\022.gazebo"
    ".msgs.Model\022!\n\005light\030\005 \003(\0132\022.gazebo.msgs"
    ".Light\022\023\n\013entity_name\030\006 \001(\t\0220\n\rworld_con"
    "trol\030\007 \001(\0132\031.gazebo.msgs.WorldControl\022#\n"
    "\006wrench\030\010 \001(\0132\023.gazebo.msgs.Wrench\">\n\004Ty"
    "pe\022\n\n\006MOVING\020\001\022\021\n\rWORLD_CONTROL\020\002\022\n\n\006WRE"
    "NCH\020\003\022\013\n\007SCALING\020\004", 418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_cmd.proto", &protobuf_RegisterTypes);
  UserCmd::default_instance_ = new UserCmd();
  UserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fcmd_2eproto {
  StaticDescriptorInitializer_user_5fcmd_2eproto() {
    protobuf_AddDesc_user_5fcmd_2eproto();
  }
} static_descriptor_initializer_user_5fcmd_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserCmd_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCmd_Type_descriptor_;
}
bool UserCmd_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserCmd_Type UserCmd::MOVING;
const UserCmd_Type UserCmd::WORLD_CONTROL;
const UserCmd_Type UserCmd::WRENCH;
const UserCmd_Type UserCmd::SCALING;
const UserCmd_Type UserCmd::Type_MIN;
const UserCmd_Type UserCmd::Type_MAX;
const int UserCmd::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserCmd::kIdFieldNumber;
const int UserCmd::kDescriptionFieldNumber;
const int UserCmd::kTypeFieldNumber;
const int UserCmd::kModelFieldNumber;
const int UserCmd::kLightFieldNumber;
const int UserCmd::kEntityNameFieldNumber;
const int UserCmd::kWorldControlFieldNumber;
const int UserCmd::kWrenchFieldNumber;
#endif  // !_MSC_VER

UserCmd::UserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.UserCmd)
}

void UserCmd::InitAsDefaultInstance() {
  world_control_ = const_cast< ::gazebo::msgs::WorldControl*>(&::gazebo::msgs::WorldControl::default_instance());
  wrench_ = const_cast< ::gazebo::msgs::Wrench*>(&::gazebo::msgs::Wrench::default_instance());
}

UserCmd::UserCmd(const UserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.UserCmd)
}

void UserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  entity_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  world_control_ = NULL;
  wrench_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCmd::~UserCmd() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.UserCmd)
  SharedDtor();
}

void UserCmd::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (entity_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entity_name_;
  }
  if (this != default_instance_) {
    delete world_control_;
    delete wrench_;
  }
}

void UserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCmd_descriptor_;
}

const UserCmd& UserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fcmd_2eproto();
  return *default_instance_;
}

UserCmd* UserCmd::default_instance_ = NULL;

UserCmd* UserCmd::New() const {
  return new UserCmd;
}

void UserCmd::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    id_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    type_ = 1;
    if (has_entity_name()) {
      if (entity_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entity_name_->clear();
      }
    }
    if (has_world_control()) {
      if (world_control_ != NULL) world_control_->::gazebo::msgs::WorldControl::Clear();
    }
    if (has_wrench()) {
      if (wrench_ != NULL) wrench_->::gazebo::msgs::Wrench::Clear();
    }
  }
  model_.Clear();
  light_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.UserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .gazebo.msgs.UserCmd.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::UserCmd_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::UserCmd_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        break;
      }

      // repeated .gazebo.msgs.Model model = 4;
      case 4: {
        if (tag == 34) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model;
        if (input->ExpectTag(42)) goto parse_light;
        break;
      }

      // repeated .gazebo.msgs.Light light = 5;
      case 5: {
        if (tag == 42) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_light()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_light;
        if (input->ExpectTag(50)) goto parse_entity_name;
        break;
      }

      // optional string entity_name = 6;
      case 6: {
        if (tag == 50) {
         parse_entity_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_name().data(), this->entity_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entity_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_world_control;
        break;
      }

      // optional .gazebo.msgs.WorldControl world_control = 7;
      case 7: {
        if (tag == 58) {
         parse_world_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wrench;
        break;
      }

      // optional .gazebo.msgs.Wrench wrench = 8;
      case 8: {
        if (tag == 66) {
         parse_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.UserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.UserCmd)
  return false;
#undef DO_
}

void UserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.UserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // required .gazebo.msgs.UserCmd.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .gazebo.msgs.Model model = 4;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->model(i), output);
  }

  // repeated .gazebo.msgs.Light light = 5;
  for (int i = 0; i < this->light_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->light(i), output);
  }

  // optional string entity_name = 6;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->entity_name(), output);
  }

  // optional .gazebo.msgs.WorldControl world_control = 7;
  if (has_world_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->world_control(), output);
  }

  // optional .gazebo.msgs.Wrench wrench = 8;
  if (has_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wrench(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.UserCmd)
}

::google::protobuf::uint8* UserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.UserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required .gazebo.msgs.UserCmd.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .gazebo.msgs.Model model = 4;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->model(i), target);
  }

  // repeated .gazebo.msgs.Light light = 5;
  for (int i = 0; i < this->light_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->light(i), target);
  }

  // optional string entity_name = 6;
  if (has_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_name().data(), this->entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->entity_name(), target);
  }

  // optional .gazebo.msgs.WorldControl world_control = 7;
  if (has_world_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->world_control(), target);
  }

  // optional .gazebo.msgs.Wrench wrench = 8;
  if (has_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wrench(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.UserCmd)
  return target;
}

int UserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required .gazebo.msgs.UserCmd.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string entity_name = 6;
    if (has_entity_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_name());
    }

    // optional .gazebo.msgs.WorldControl world_control = 7;
    if (has_world_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_control());
    }

    // optional .gazebo.msgs.Wrench wrench = 8;
    if (has_wrench()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrench());
    }

  }
  // repeated .gazebo.msgs.Model model = 4;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .gazebo.msgs.Light light = 5;
  total_size += 1 * this->light_size();
  for (int i = 0; i < this->light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->light(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCmd::MergeFrom(const UserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  light_.MergeFrom(from.light_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_entity_name()) {
      set_entity_name(from.entity_name());
    }
    if (from.has_world_control()) {
      mutable_world_control()->::gazebo::msgs::WorldControl::MergeFrom(from.world_control());
    }
    if (from.has_wrench()) {
      mutable_wrench()->::gazebo::msgs::Wrench::MergeFrom(from.wrench());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCmd::CopyFrom(const UserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->model())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->light())) return false;
  if (has_wrench()) {
    if (!this->wrench().IsInitialized()) return false;
  }
  return true;
}

void UserCmd::Swap(UserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(type_, other->type_);
    model_.Swap(&other->model_);
    light_.Swap(&other->light_);
    std::swap(entity_name_, other->entity_name_);
    std::swap(world_control_, other->world_control_);
    std::swap(wrench_, other->wrench_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCmd_descriptor_;
  metadata.reflection = UserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
