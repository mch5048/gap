// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logical_camera_image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logical_camera_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* LogicalCameraImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicalCameraImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicalCameraImage_Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicalCameraImage_Model_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logical_5fcamera_5fimage_2eproto() {
  protobuf_AddDesc_logical_5fcamera_5fimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logical_camera_image.proto");
  GOOGLE_CHECK(file != NULL);
  LogicalCameraImage_descriptor_ = file->message_type(0);
  static const int LogicalCameraImage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage, model_),
  };
  LogicalCameraImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicalCameraImage_descriptor_,
      LogicalCameraImage::default_instance_,
      LogicalCameraImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicalCameraImage));
  LogicalCameraImage_Model_descriptor_ = LogicalCameraImage_descriptor_->nested_type(0);
  static const int LogicalCameraImage_Model_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage_Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage_Model, pose_),
  };
  LogicalCameraImage_Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicalCameraImage_Model_descriptor_,
      LogicalCameraImage_Model::default_instance_,
      LogicalCameraImage_Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage_Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicalCameraImage_Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicalCameraImage_Model));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logical_5fcamera_5fimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicalCameraImage_descriptor_, &LogicalCameraImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicalCameraImage_Model_descriptor_, &LogicalCameraImage_Model::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logical_5fcamera_5fimage_2eproto() {
  delete LogicalCameraImage::default_instance_;
  delete LogicalCameraImage_reflection_;
  delete LogicalCameraImage_Model::default_instance_;
  delete LogicalCameraImage_Model_reflection_;
}

void protobuf_AddDesc_logical_5fcamera_5fimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032logical_camera_image.proto\022\013gazebo.msg"
    "s\032\npose.proto\"\243\001\n\022LogicalCameraImage\022\037\n\004"
    "pose\030\001 \002(\0132\021.gazebo.msgs.Pose\0224\n\005model\030\002"
    " \003(\0132%.gazebo.msgs.LogicalCameraImage.Mo"
    "del\0326\n\005Model\022\014\n\004name\030\001 \002(\t\022\037\n\004pose\030\002 \002(\013"
    "2\021.gazebo.msgs.Pose", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logical_camera_image.proto", &protobuf_RegisterTypes);
  LogicalCameraImage::default_instance_ = new LogicalCameraImage();
  LogicalCameraImage_Model::default_instance_ = new LogicalCameraImage_Model();
  LogicalCameraImage::default_instance_->InitAsDefaultInstance();
  LogicalCameraImage_Model::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logical_5fcamera_5fimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logical_5fcamera_5fimage_2eproto {
  StaticDescriptorInitializer_logical_5fcamera_5fimage_2eproto() {
    protobuf_AddDesc_logical_5fcamera_5fimage_2eproto();
  }
} static_descriptor_initializer_logical_5fcamera_5fimage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogicalCameraImage_Model::kNameFieldNumber;
const int LogicalCameraImage_Model::kPoseFieldNumber;
#endif  // !_MSC_VER

LogicalCameraImage_Model::LogicalCameraImage_Model()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogicalCameraImage.Model)
}

void LogicalCameraImage_Model::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

LogicalCameraImage_Model::LogicalCameraImage_Model(const LogicalCameraImage_Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogicalCameraImage.Model)
}

void LogicalCameraImage_Model::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicalCameraImage_Model::~LogicalCameraImage_Model() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogicalCameraImage.Model)
  SharedDtor();
}

void LogicalCameraImage_Model::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pose_;
  }
}

void LogicalCameraImage_Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicalCameraImage_Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicalCameraImage_Model_descriptor_;
}

const LogicalCameraImage_Model& LogicalCameraImage_Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logical_5fcamera_5fimage_2eproto();
  return *default_instance_;
}

LogicalCameraImage_Model* LogicalCameraImage_Model::default_instance_ = NULL;

LogicalCameraImage_Model* LogicalCameraImage_Model::New() const {
  return new LogicalCameraImage_Model;
}

void LogicalCameraImage_Model::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicalCameraImage_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.LogicalCameraImage.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // required .gazebo.msgs.Pose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.LogicalCameraImage.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.LogicalCameraImage.Model)
  return false;
#undef DO_
}

void LogicalCameraImage_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.LogicalCameraImage.Model)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .gazebo.msgs.Pose pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.LogicalCameraImage.Model)
}

::google::protobuf::uint8* LogicalCameraImage_Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogicalCameraImage.Model)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .gazebo.msgs.Pose pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogicalCameraImage.Model)
  return target;
}

int LogicalCameraImage_Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .gazebo.msgs.Pose pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalCameraImage_Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicalCameraImage_Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicalCameraImage_Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicalCameraImage_Model::MergeFrom(const LogicalCameraImage_Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicalCameraImage_Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalCameraImage_Model::CopyFrom(const LogicalCameraImage_Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalCameraImage_Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void LogicalCameraImage_Model::Swap(LogicalCameraImage_Model* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicalCameraImage_Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicalCameraImage_Model_descriptor_;
  metadata.reflection = LogicalCameraImage_Model_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogicalCameraImage::kPoseFieldNumber;
const int LogicalCameraImage::kModelFieldNumber;
#endif  // !_MSC_VER

LogicalCameraImage::LogicalCameraImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.LogicalCameraImage)
}

void LogicalCameraImage::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

LogicalCameraImage::LogicalCameraImage(const LogicalCameraImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.LogicalCameraImage)
}

void LogicalCameraImage::SharedCtor() {
  _cached_size_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicalCameraImage::~LogicalCameraImage() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.LogicalCameraImage)
  SharedDtor();
}

void LogicalCameraImage::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void LogicalCameraImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicalCameraImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicalCameraImage_descriptor_;
}

const LogicalCameraImage& LogicalCameraImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logical_5fcamera_5fimage_2eproto();
  return *default_instance_;
}

LogicalCameraImage* LogicalCameraImage::default_instance_ = NULL;

LogicalCameraImage* LogicalCameraImage::New() const {
  return new LogicalCameraImage;
}

void LogicalCameraImage::Clear() {
  if (has_pose()) {
    if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  }
  model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicalCameraImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.LogicalCameraImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // repeated .gazebo.msgs.LogicalCameraImage.Model model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.LogicalCameraImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.LogicalCameraImage)
  return false;
#undef DO_
}

void LogicalCameraImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.LogicalCameraImage)
  // required .gazebo.msgs.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(), output);
  }

  // repeated .gazebo.msgs.LogicalCameraImage.Model model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->model(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.LogicalCameraImage)
}

::google::protobuf::uint8* LogicalCameraImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.LogicalCameraImage)
  // required .gazebo.msgs.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pose(), target);
  }

  // repeated .gazebo.msgs.LogicalCameraImage.Model model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->model(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.LogicalCameraImage)
  return target;
}

int LogicalCameraImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Pose pose = 1;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  // repeated .gazebo.msgs.LogicalCameraImage.Model model = 2;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalCameraImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicalCameraImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicalCameraImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicalCameraImage::MergeFrom(const LogicalCameraImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicalCameraImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalCameraImage::CopyFrom(const LogicalCameraImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalCameraImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->model())) return false;
  return true;
}

void LogicalCameraImage::Swap(LogicalCameraImage* other) {
  if (other != this) {
    std::swap(pose_, other->pose_);
    model_.Swap(&other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicalCameraImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicalCameraImage_descriptor_;
  metadata.reflection = LogicalCameraImage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
