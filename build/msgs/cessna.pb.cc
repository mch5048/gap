// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cessna.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cessna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Cessna_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cessna_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cessna_2eproto() {
  protobuf_AddDesc_cessna_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cessna.proto");
  GOOGLE_CHECK(file != NULL);
  Cessna_descriptor_ = file->message_type(0);
  static const int Cessna_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, propeller_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, left_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, left_flap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, right_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, right_flap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, elevators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, rudder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_propeller_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_left_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_left_flap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_right_aileron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_right_flap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_elevators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, cmd_rudder_),
  };
  Cessna_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cessna_descriptor_,
      Cessna::default_instance_,
      Cessna_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cessna, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cessna));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cessna_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cessna_descriptor_, &Cessna::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cessna_2eproto() {
  delete Cessna::default_instance_;
  delete Cessna_reflection_;
}

void protobuf_AddDesc_cessna_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014cessna.proto\022\013gazebo.msgs\"\304\002\n\006Cessna\022\027"
    "\n\017propeller_speed\030\001 \001(\002\022\024\n\014left_aileron\030"
    "\002 \001(\002\022\021\n\tleft_flap\030\003 \001(\002\022\025\n\rright_ailero"
    "n\030\004 \001(\002\022\022\n\nright_flap\030\005 \001(\002\022\021\n\televators"
    "\030\006 \001(\002\022\016\n\006rudder\030\007 \001(\002\022\033\n\023cmd_propeller_"
    "speed\030\010 \001(\002\022\030\n\020cmd_left_aileron\030\t \001(\002\022\025\n"
    "\rcmd_left_flap\030\n \001(\002\022\031\n\021cmd_right_ailero"
    "n\030\013 \001(\002\022\026\n\016cmd_right_flap\030\014 \001(\002\022\025\n\rcmd_e"
    "levators\030\r \001(\002\022\022\n\ncmd_rudder\030\016 \001(\002", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cessna.proto", &protobuf_RegisterTypes);
  Cessna::default_instance_ = new Cessna();
  Cessna::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cessna_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cessna_2eproto {
  StaticDescriptorInitializer_cessna_2eproto() {
    protobuf_AddDesc_cessna_2eproto();
  }
} static_descriptor_initializer_cessna_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Cessna::kPropellerSpeedFieldNumber;
const int Cessna::kLeftAileronFieldNumber;
const int Cessna::kLeftFlapFieldNumber;
const int Cessna::kRightAileronFieldNumber;
const int Cessna::kRightFlapFieldNumber;
const int Cessna::kElevatorsFieldNumber;
const int Cessna::kRudderFieldNumber;
const int Cessna::kCmdPropellerSpeedFieldNumber;
const int Cessna::kCmdLeftAileronFieldNumber;
const int Cessna::kCmdLeftFlapFieldNumber;
const int Cessna::kCmdRightAileronFieldNumber;
const int Cessna::kCmdRightFlapFieldNumber;
const int Cessna::kCmdElevatorsFieldNumber;
const int Cessna::kCmdRudderFieldNumber;
#endif  // !_MSC_VER

Cessna::Cessna()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.Cessna)
}

void Cessna::InitAsDefaultInstance() {
}

Cessna::Cessna(const Cessna& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.Cessna)
}

void Cessna::SharedCtor() {
  _cached_size_ = 0;
  propeller_speed_ = 0;
  left_aileron_ = 0;
  left_flap_ = 0;
  right_aileron_ = 0;
  right_flap_ = 0;
  elevators_ = 0;
  rudder_ = 0;
  cmd_propeller_speed_ = 0;
  cmd_left_aileron_ = 0;
  cmd_left_flap_ = 0;
  cmd_right_aileron_ = 0;
  cmd_right_flap_ = 0;
  cmd_elevators_ = 0;
  cmd_rudder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cessna::~Cessna() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.Cessna)
  SharedDtor();
}

void Cessna::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cessna::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cessna::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cessna_descriptor_;
}

const Cessna& Cessna::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cessna_2eproto();
  return *default_instance_;
}

Cessna* Cessna::default_instance_ = NULL;

Cessna* Cessna::New() const {
  return new Cessna;
}

void Cessna::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cessna*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(propeller_speed_, cmd_propeller_speed_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(cmd_left_aileron_, cmd_rudder_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cessna::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.Cessna)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float propeller_speed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &propeller_speed_)));
          set_has_propeller_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_left_aileron;
        break;
      }

      // optional float left_aileron = 2;
      case 2: {
        if (tag == 21) {
         parse_left_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_aileron_)));
          set_has_left_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_left_flap;
        break;
      }

      // optional float left_flap = 3;
      case 3: {
        if (tag == 29) {
         parse_left_flap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_flap_)));
          set_has_left_flap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_right_aileron;
        break;
      }

      // optional float right_aileron = 4;
      case 4: {
        if (tag == 37) {
         parse_right_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_aileron_)));
          set_has_right_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_right_flap;
        break;
      }

      // optional float right_flap = 5;
      case 5: {
        if (tag == 45) {
         parse_right_flap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_flap_)));
          set_has_right_flap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_elevators;
        break;
      }

      // optional float elevators = 6;
      case 6: {
        if (tag == 53) {
         parse_elevators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevators_)));
          set_has_elevators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_rudder;
        break;
      }

      // optional float rudder = 7;
      case 7: {
        if (tag == 61) {
         parse_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rudder_)));
          set_has_rudder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cmd_propeller_speed;
        break;
      }

      // optional float cmd_propeller_speed = 8;
      case 8: {
        if (tag == 69) {
         parse_cmd_propeller_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_propeller_speed_)));
          set_has_cmd_propeller_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cmd_left_aileron;
        break;
      }

      // optional float cmd_left_aileron = 9;
      case 9: {
        if (tag == 77) {
         parse_cmd_left_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_aileron_)));
          set_has_cmd_left_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_cmd_left_flap;
        break;
      }

      // optional float cmd_left_flap = 10;
      case 10: {
        if (tag == 85) {
         parse_cmd_left_flap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_flap_)));
          set_has_cmd_left_flap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_cmd_right_aileron;
        break;
      }

      // optional float cmd_right_aileron = 11;
      case 11: {
        if (tag == 93) {
         parse_cmd_right_aileron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_aileron_)));
          set_has_cmd_right_aileron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_cmd_right_flap;
        break;
      }

      // optional float cmd_right_flap = 12;
      case 12: {
        if (tag == 101) {
         parse_cmd_right_flap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_flap_)));
          set_has_cmd_right_flap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_cmd_elevators;
        break;
      }

      // optional float cmd_elevators = 13;
      case 13: {
        if (tag == 109) {
         parse_cmd_elevators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_elevators_)));
          set_has_cmd_elevators();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_cmd_rudder;
        break;
      }

      // optional float cmd_rudder = 14;
      case 14: {
        if (tag == 117) {
         parse_cmd_rudder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_rudder_)));
          set_has_cmd_rudder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.Cessna)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.Cessna)
  return false;
#undef DO_
}

void Cessna::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.Cessna)
  // optional float propeller_speed = 1;
  if (has_propeller_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->propeller_speed(), output);
  }

  // optional float left_aileron = 2;
  if (has_left_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left_aileron(), output);
  }

  // optional float left_flap = 3;
  if (has_left_flap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->left_flap(), output);
  }

  // optional float right_aileron = 4;
  if (has_right_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->right_aileron(), output);
  }

  // optional float right_flap = 5;
  if (has_right_flap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->right_flap(), output);
  }

  // optional float elevators = 6;
  if (has_elevators()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->elevators(), output);
  }

  // optional float rudder = 7;
  if (has_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rudder(), output);
  }

  // optional float cmd_propeller_speed = 8;
  if (has_cmd_propeller_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cmd_propeller_speed(), output);
  }

  // optional float cmd_left_aileron = 9;
  if (has_cmd_left_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cmd_left_aileron(), output);
  }

  // optional float cmd_left_flap = 10;
  if (has_cmd_left_flap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cmd_left_flap(), output);
  }

  // optional float cmd_right_aileron = 11;
  if (has_cmd_right_aileron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cmd_right_aileron(), output);
  }

  // optional float cmd_right_flap = 12;
  if (has_cmd_right_flap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cmd_right_flap(), output);
  }

  // optional float cmd_elevators = 13;
  if (has_cmd_elevators()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cmd_elevators(), output);
  }

  // optional float cmd_rudder = 14;
  if (has_cmd_rudder()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->cmd_rudder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.Cessna)
}

::google::protobuf::uint8* Cessna::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.Cessna)
  // optional float propeller_speed = 1;
  if (has_propeller_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->propeller_speed(), target);
  }

  // optional float left_aileron = 2;
  if (has_left_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left_aileron(), target);
  }

  // optional float left_flap = 3;
  if (has_left_flap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->left_flap(), target);
  }

  // optional float right_aileron = 4;
  if (has_right_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->right_aileron(), target);
  }

  // optional float right_flap = 5;
  if (has_right_flap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->right_flap(), target);
  }

  // optional float elevators = 6;
  if (has_elevators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->elevators(), target);
  }

  // optional float rudder = 7;
  if (has_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rudder(), target);
  }

  // optional float cmd_propeller_speed = 8;
  if (has_cmd_propeller_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cmd_propeller_speed(), target);
  }

  // optional float cmd_left_aileron = 9;
  if (has_cmd_left_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cmd_left_aileron(), target);
  }

  // optional float cmd_left_flap = 10;
  if (has_cmd_left_flap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cmd_left_flap(), target);
  }

  // optional float cmd_right_aileron = 11;
  if (has_cmd_right_aileron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cmd_right_aileron(), target);
  }

  // optional float cmd_right_flap = 12;
  if (has_cmd_right_flap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cmd_right_flap(), target);
  }

  // optional float cmd_elevators = 13;
  if (has_cmd_elevators()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cmd_elevators(), target);
  }

  // optional float cmd_rudder = 14;
  if (has_cmd_rudder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->cmd_rudder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.Cessna)
  return target;
}

int Cessna::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float propeller_speed = 1;
    if (has_propeller_speed()) {
      total_size += 1 + 4;
    }

    // optional float left_aileron = 2;
    if (has_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float left_flap = 3;
    if (has_left_flap()) {
      total_size += 1 + 4;
    }

    // optional float right_aileron = 4;
    if (has_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float right_flap = 5;
    if (has_right_flap()) {
      total_size += 1 + 4;
    }

    // optional float elevators = 6;
    if (has_elevators()) {
      total_size += 1 + 4;
    }

    // optional float rudder = 7;
    if (has_rudder()) {
      total_size += 1 + 4;
    }

    // optional float cmd_propeller_speed = 8;
    if (has_cmd_propeller_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float cmd_left_aileron = 9;
    if (has_cmd_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_left_flap = 10;
    if (has_cmd_left_flap()) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_aileron = 11;
    if (has_cmd_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_flap = 12;
    if (has_cmd_right_flap()) {
      total_size += 1 + 4;
    }

    // optional float cmd_elevators = 13;
    if (has_cmd_elevators()) {
      total_size += 1 + 4;
    }

    // optional float cmd_rudder = 14;
    if (has_cmd_rudder()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cessna::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cessna* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cessna*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cessna::MergeFrom(const Cessna& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propeller_speed()) {
      set_propeller_speed(from.propeller_speed());
    }
    if (from.has_left_aileron()) {
      set_left_aileron(from.left_aileron());
    }
    if (from.has_left_flap()) {
      set_left_flap(from.left_flap());
    }
    if (from.has_right_aileron()) {
      set_right_aileron(from.right_aileron());
    }
    if (from.has_right_flap()) {
      set_right_flap(from.right_flap());
    }
    if (from.has_elevators()) {
      set_elevators(from.elevators());
    }
    if (from.has_rudder()) {
      set_rudder(from.rudder());
    }
    if (from.has_cmd_propeller_speed()) {
      set_cmd_propeller_speed(from.cmd_propeller_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd_left_aileron()) {
      set_cmd_left_aileron(from.cmd_left_aileron());
    }
    if (from.has_cmd_left_flap()) {
      set_cmd_left_flap(from.cmd_left_flap());
    }
    if (from.has_cmd_right_aileron()) {
      set_cmd_right_aileron(from.cmd_right_aileron());
    }
    if (from.has_cmd_right_flap()) {
      set_cmd_right_flap(from.cmd_right_flap());
    }
    if (from.has_cmd_elevators()) {
      set_cmd_elevators(from.cmd_elevators());
    }
    if (from.has_cmd_rudder()) {
      set_cmd_rudder(from.cmd_rudder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cessna::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cessna::CopyFrom(const Cessna& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cessna::IsInitialized() const {

  return true;
}

void Cessna::Swap(Cessna* other) {
  if (other != this) {
    std::swap(propeller_speed_, other->propeller_speed_);
    std::swap(left_aileron_, other->left_aileron_);
    std::swap(left_flap_, other->left_flap_);
    std::swap(right_aileron_, other->right_aileron_);
    std::swap(right_flap_, other->right_flap_);
    std::swap(elevators_, other->elevators_);
    std::swap(rudder_, other->rudder_);
    std::swap(cmd_propeller_speed_, other->cmd_propeller_speed_);
    std::swap(cmd_left_aileron_, other->cmd_left_aileron_);
    std::swap(cmd_left_flap_, other->cmd_left_flap_);
    std::swap(cmd_right_aileron_, other->cmd_right_aileron_);
    std::swap(cmd_right_flap_, other->cmd_right_flap_);
    std::swap(cmd_elevators_, other->cmd_elevators_);
    std::swap(cmd_rudder_, other->cmd_rudder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cessna::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cessna_descriptor_;
  metadata.reflection = Cessna_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
