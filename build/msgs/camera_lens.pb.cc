// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_lens.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camera_lens.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CameraLens_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraLens_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_camera_5flens_2eproto() {
  protobuf_AddDesc_camera_5flens_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "camera_lens.proto");
  GOOGLE_CHECK(file != NULL);
  CameraLens_descriptor_ = file->message_type(0);
  static const int CameraLens_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, c2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, c3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, fun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, scale_to_hfov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, cutoff_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, hfov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, env_texture_size_),
  };
  CameraLens_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraLens_descriptor_,
      CameraLens::default_instance_,
      CameraLens_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraLens, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraLens));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_camera_5flens_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraLens_descriptor_, &CameraLens::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_camera_5flens_2eproto() {
  delete CameraLens::default_instance_;
  delete CameraLens_reflection_;
}

void protobuf_AddDesc_camera_5flens_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021camera_lens.proto\022\013gazebo.msgs\"\253\001\n\nCam"
    "eraLens\022\014\n\004type\030\001 \002(\t\022\n\n\002c1\030\002 \001(\001\022\n\n\002c2\030"
    "\003 \001(\001\022\n\n\002c3\030\004 \001(\001\022\t\n\001f\030\005 \001(\001\022\013\n\003fun\030\006 \001("
    "\t\022\025\n\rscale_to_hfov\030\007 \001(\010\022\024\n\014cutoff_angle"
    "\030\010 \001(\001\022\014\n\004hfov\030\t \001(\001\022\030\n\020env_texture_size"
    "\030\n \001(\005", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_lens.proto", &protobuf_RegisterTypes);
  CameraLens::default_instance_ = new CameraLens();
  CameraLens::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_camera_5flens_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_camera_5flens_2eproto {
  StaticDescriptorInitializer_camera_5flens_2eproto() {
    protobuf_AddDesc_camera_5flens_2eproto();
  }
} static_descriptor_initializer_camera_5flens_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CameraLens::kTypeFieldNumber;
const int CameraLens::kC1FieldNumber;
const int CameraLens::kC2FieldNumber;
const int CameraLens::kC3FieldNumber;
const int CameraLens::kFFieldNumber;
const int CameraLens::kFunFieldNumber;
const int CameraLens::kScaleToHfovFieldNumber;
const int CameraLens::kCutoffAngleFieldNumber;
const int CameraLens::kHfovFieldNumber;
const int CameraLens::kEnvTextureSizeFieldNumber;
#endif  // !_MSC_VER

CameraLens::CameraLens()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.CameraLens)
}

void CameraLens::InitAsDefaultInstance() {
}

CameraLens::CameraLens(const CameraLens& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.CameraLens)
}

void CameraLens::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c1_ = 0;
  c2_ = 0;
  c3_ = 0;
  f_ = 0;
  fun_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_to_hfov_ = false;
  cutoff_angle_ = 0;
  hfov_ = 0;
  env_texture_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraLens::~CameraLens() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.CameraLens)
  SharedDtor();
}

void CameraLens::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (fun_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fun_;
  }
  if (this != default_instance_) {
  }
}

void CameraLens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraLens::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraLens_descriptor_;
}

const CameraLens& CameraLens::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_5flens_2eproto();
  return *default_instance_;
}

CameraLens* CameraLens::default_instance_ = NULL;

CameraLens* CameraLens::New() const {
  return new CameraLens;
}

void CameraLens::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraLens*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(c1_, f_);
    ZR_(cutoff_angle_, scale_to_hfov_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_fun()) {
      if (fun_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fun_->clear();
      }
    }
  }
  ZR_(env_texture_size_, hfov_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraLens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.CameraLens)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_c1;
        break;
      }

      // optional double c1 = 2;
      case 2: {
        if (tag == 17) {
         parse_c1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
          set_has_c1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_c2;
        break;
      }

      // optional double c2 = 3;
      case 3: {
        if (tag == 25) {
         parse_c2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
          set_has_c2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_c3;
        break;
      }

      // optional double c3 = 4;
      case 4: {
        if (tag == 33) {
         parse_c3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
          set_has_c3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_f;
        break;
      }

      // optional double f = 5;
      case 5: {
        if (tag == 41) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fun;
        break;
      }

      // optional string fun = 6;
      case 6: {
        if (tag == 50) {
         parse_fun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fun()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fun().data(), this->fun().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fun");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_scale_to_hfov;
        break;
      }

      // optional bool scale_to_hfov = 7;
      case 7: {
        if (tag == 56) {
         parse_scale_to_hfov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_to_hfov_)));
          set_has_scale_to_hfov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_cutoff_angle;
        break;
      }

      // optional double cutoff_angle = 8;
      case 8: {
        if (tag == 65) {
         parse_cutoff_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cutoff_angle_)));
          set_has_cutoff_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_hfov;
        break;
      }

      // optional double hfov = 9;
      case 9: {
        if (tag == 73) {
         parse_hfov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hfov_)));
          set_has_hfov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_env_texture_size;
        break;
      }

      // optional int32 env_texture_size = 10;
      case 10: {
        if (tag == 80) {
         parse_env_texture_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &env_texture_size_)));
          set_has_env_texture_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.CameraLens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.CameraLens)
  return false;
#undef DO_
}

void CameraLens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.CameraLens)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional double c1 = 2;
  if (has_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->c1(), output);
  }

  // optional double c2 = 3;
  if (has_c2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c2(), output);
  }

  // optional double c3 = 4;
  if (has_c3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c3(), output);
  }

  // optional double f = 5;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->f(), output);
  }

  // optional string fun = 6;
  if (has_fun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fun().data(), this->fun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fun");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fun(), output);
  }

  // optional bool scale_to_hfov = 7;
  if (has_scale_to_hfov()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->scale_to_hfov(), output);
  }

  // optional double cutoff_angle = 8;
  if (has_cutoff_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cutoff_angle(), output);
  }

  // optional double hfov = 9;
  if (has_hfov()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->hfov(), output);
  }

  // optional int32 env_texture_size = 10;
  if (has_env_texture_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->env_texture_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.CameraLens)
}

::google::protobuf::uint8* CameraLens::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.CameraLens)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional double c1 = 2;
  if (has_c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->c1(), target);
  }

  // optional double c2 = 3;
  if (has_c2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c2(), target);
  }

  // optional double c3 = 4;
  if (has_c3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c3(), target);
  }

  // optional double f = 5;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->f(), target);
  }

  // optional string fun = 6;
  if (has_fun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fun().data(), this->fun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fun");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fun(), target);
  }

  // optional bool scale_to_hfov = 7;
  if (has_scale_to_hfov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->scale_to_hfov(), target);
  }

  // optional double cutoff_angle = 8;
  if (has_cutoff_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cutoff_angle(), target);
  }

  // optional double hfov = 9;
  if (has_hfov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->hfov(), target);
  }

  // optional int32 env_texture_size = 10;
  if (has_env_texture_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->env_texture_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.CameraLens)
  return target;
}

int CameraLens::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional double c1 = 2;
    if (has_c1()) {
      total_size += 1 + 8;
    }

    // optional double c2 = 3;
    if (has_c2()) {
      total_size += 1 + 8;
    }

    // optional double c3 = 4;
    if (has_c3()) {
      total_size += 1 + 8;
    }

    // optional double f = 5;
    if (has_f()) {
      total_size += 1 + 8;
    }

    // optional string fun = 6;
    if (has_fun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fun());
    }

    // optional bool scale_to_hfov = 7;
    if (has_scale_to_hfov()) {
      total_size += 1 + 1;
    }

    // optional double cutoff_angle = 8;
    if (has_cutoff_angle()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double hfov = 9;
    if (has_hfov()) {
      total_size += 1 + 8;
    }

    // optional int32 env_texture_size = 10;
    if (has_env_texture_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->env_texture_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraLens::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraLens* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraLens*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraLens::MergeFrom(const CameraLens& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_c1()) {
      set_c1(from.c1());
    }
    if (from.has_c2()) {
      set_c2(from.c2());
    }
    if (from.has_c3()) {
      set_c3(from.c3());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
    if (from.has_fun()) {
      set_fun(from.fun());
    }
    if (from.has_scale_to_hfov()) {
      set_scale_to_hfov(from.scale_to_hfov());
    }
    if (from.has_cutoff_angle()) {
      set_cutoff_angle(from.cutoff_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hfov()) {
      set_hfov(from.hfov());
    }
    if (from.has_env_texture_size()) {
      set_env_texture_size(from.env_texture_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraLens::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraLens::CopyFrom(const CameraLens& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLens::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CameraLens::Swap(CameraLens* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(c1_, other->c1_);
    std::swap(c2_, other->c2_);
    std::swap(c3_, other->c3_);
    std::swap(f_, other->f_);
    std::swap(fun_, other->fun_);
    std::swap(scale_to_hfov_, other->scale_to_hfov_);
    std::swap(cutoff_angle_, other->cutoff_angle_);
    std::swap(hfov_, other->hfov_);
    std::swap(env_texture_size_, other->env_texture_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraLens::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraLens_descriptor_;
  metadata.reflection = CameraLens_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
