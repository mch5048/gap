// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef PROTOBUF_object_2eproto__INCLUDED
#define PROTOBUF_object_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace gap {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_object_2eproto();
void protobuf_AssignDesc_object_2eproto();
void protobuf_ShutdownFile_object_2eproto();

class Object;

enum Object_ModelType {
  Object_ModelType_SPHERE = 1,
  Object_ModelType_CYLINDER = 2,
  Object_ModelType_BOX = 3,
  Object_ModelType_CUSTOM = 4,
  Object_ModelType_CUSTOM_LIGHT = 5,
  Object_ModelType_MODEL = 6
};
bool Object_ModelType_IsValid(int value);
const Object_ModelType Object_ModelType_ModelType_MIN = Object_ModelType_SPHERE;
const Object_ModelType Object_ModelType_ModelType_MAX = Object_ModelType_MODEL;
const int Object_ModelType_ModelType_ARRAYSIZE = Object_ModelType_ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_ModelType_descriptor();
inline const ::std::string& Object_ModelType_Name(Object_ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Object_ModelType_descriptor(), value);
}
inline bool Object_ModelType_Parse(
    const ::std::string& name, Object_ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Object_ModelType>(
    Object_ModelType_descriptor(), name, value);
}
// ===================================================================

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Object_ModelType ModelType;
  static const ModelType SPHERE = Object_ModelType_SPHERE;
  static const ModelType CYLINDER = Object_ModelType_CYLINDER;
  static const ModelType BOX = Object_ModelType_BOX;
  static const ModelType CUSTOM = Object_ModelType_CUSTOM;
  static const ModelType CUSTOM_LIGHT = Object_ModelType_CUSTOM_LIGHT;
  static const ModelType MODEL = Object_ModelType_MODEL;
  static inline bool ModelType_IsValid(int value) {
    return Object_ModelType_IsValid(value);
  }
  static const ModelType ModelType_MIN =
    Object_ModelType_ModelType_MIN;
  static const ModelType ModelType_MAX =
    Object_ModelType_ModelType_MAX;
  static const int ModelType_ARRAYSIZE =
    Object_ModelType_ModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelType_descriptor() {
    return Object_ModelType_descriptor();
  }
  static inline const ::std::string& ModelType_Name(ModelType value) {
    return Object_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(const ::std::string& name,
      ModelType* value) {
    return Object_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gap.msgs.Object.ModelType model_type = 1;
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 1;
  inline ::gap::msgs::Object_ModelType model_type() const;
  inline void set_model_type(::gap::msgs::Object_ModelType value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .gazebo.msgs.Pose pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::gazebo::msgs::Pose& pose() const;
  inline ::gazebo::msgs::Pose* mutable_pose();
  inline ::gazebo::msgs::Pose* release_pose();
  inline void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // optional double mass = 5;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 5;
  inline double mass() const;
  inline void set_mass(double value);

  // optional string texture_uri = 6;
  inline bool has_texture_uri() const;
  inline void clear_texture_uri();
  static const int kTextureUriFieldNumber = 6;
  inline const ::std::string& texture_uri() const;
  inline void set_texture_uri(const ::std::string& value);
  inline void set_texture_uri(const char* value);
  inline void set_texture_uri(const char* value, size_t size);
  inline ::std::string* mutable_texture_uri();
  inline ::std::string* release_texture_uri();
  inline void set_allocated_texture_uri(::std::string* texture_uri);

  // optional string texture_name = 7;
  inline bool has_texture_name() const;
  inline void clear_texture_name();
  static const int kTextureNameFieldNumber = 7;
  inline const ::std::string& texture_name() const;
  inline void set_texture_name(const ::std::string& value);
  inline void set_texture_name(const char* value);
  inline void set_texture_name(const char* value, size_t size);
  inline ::std::string* mutable_texture_name();
  inline ::std::string* release_texture_name();
  inline void set_allocated_texture_name(::std::string* texture_name);

  // optional double radius = 8;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 8;
  inline double radius() const;
  inline void set_radius(double value);

  // optional double length = 9;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 9;
  inline double length() const;
  inline void set_length(double value);

  // optional .gazebo.msgs.Vector3d box_size = 10;
  inline bool has_box_size() const;
  inline void clear_box_size();
  static const int kBoxSizeFieldNumber = 10;
  inline const ::gazebo::msgs::Vector3d& box_size() const;
  inline ::gazebo::msgs::Vector3d* mutable_box_size();
  inline ::gazebo::msgs::Vector3d* release_box_size();
  inline void set_allocated_box_size(::gazebo::msgs::Vector3d* box_size);

  // optional string sdf = 11;
  inline bool has_sdf() const;
  inline void clear_sdf();
  static const int kSdfFieldNumber = 11;
  inline const ::std::string& sdf() const;
  inline void set_sdf(const ::std::string& value);
  inline void set_sdf(const char* value);
  inline void set_sdf(const char* value, size_t size);
  inline ::std::string* mutable_sdf();
  inline ::std::string* release_sdf();
  inline void set_allocated_sdf(::std::string* sdf);

  // @@protoc_insertion_point(class_scope:gap.msgs.Object)
 private:
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_mass();
  inline void clear_has_mass();
  inline void set_has_texture_uri();
  inline void clear_has_texture_uri();
  inline void set_has_texture_name();
  inline void clear_has_texture_name();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_box_size();
  inline void clear_has_box_size();
  inline void set_has_sdf();
  inline void clear_has_sdf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::gazebo::msgs::Pose* pose_;
  double mass_;
  ::std::string* texture_uri_;
  ::std::string* texture_name_;
  double radius_;
  double length_;
  ::gazebo::msgs::Vector3d* box_size_;
  ::std::string* sdf_;
  int model_type_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// ===================================================================


// ===================================================================

// Object

// optional .gap.msgs.Object.ModelType model_type = 1;
inline bool Object::has_model_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_model_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_model_type() {
  model_type_ = 1;
  clear_has_model_type();
}
inline ::gap::msgs::Object_ModelType Object::model_type() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.model_type)
  return static_cast< ::gap::msgs::Object_ModelType >(model_type_);
}
inline void Object::set_model_type(::gap::msgs::Object_ModelType value) {
  assert(::gap::msgs::Object_ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.Object.model_type)
}

// optional string name = 2;
inline bool Object::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.name)
  return *name_;
}
inline void Object::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.Object.name)
}
inline void Object::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.Object.name)
}
inline void Object::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.Object.name)
}
inline ::std::string* Object::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.name)
  return name_;
}
inline ::std::string* Object::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Object::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.name)
}

// optional .gazebo.msgs.Pose pose = 3;
inline bool Object::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_pose() {
  if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
  clear_has_pose();
}
inline const ::gazebo::msgs::Pose& Object::pose() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::gazebo::msgs::Pose* Object::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::gazebo::msgs::Pose;
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.pose)
  return pose_;
}
inline ::gazebo::msgs::Pose* Object::release_pose() {
  clear_has_pose();
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Object::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.pose)
}

// optional double mass = 5;
inline bool Object::has_mass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_mass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_mass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
inline double Object::mass() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.mass)
  return mass_;
}
inline void Object::set_mass(double value) {
  set_has_mass();
  mass_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.Object.mass)
}

// optional string texture_uri = 6;
inline bool Object::has_texture_uri() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_texture_uri() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_texture_uri() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_texture_uri() {
  if (texture_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_uri_->clear();
  }
  clear_has_texture_uri();
}
inline const ::std::string& Object::texture_uri() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.texture_uri)
  return *texture_uri_;
}
inline void Object::set_texture_uri(const ::std::string& value) {
  set_has_texture_uri();
  if (texture_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_uri_ = new ::std::string;
  }
  texture_uri_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.Object.texture_uri)
}
inline void Object::set_texture_uri(const char* value) {
  set_has_texture_uri();
  if (texture_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_uri_ = new ::std::string;
  }
  texture_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.Object.texture_uri)
}
inline void Object::set_texture_uri(const char* value, size_t size) {
  set_has_texture_uri();
  if (texture_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_uri_ = new ::std::string;
  }
  texture_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.Object.texture_uri)
}
inline ::std::string* Object::mutable_texture_uri() {
  set_has_texture_uri();
  if (texture_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.texture_uri)
  return texture_uri_;
}
inline ::std::string* Object::release_texture_uri() {
  clear_has_texture_uri();
  if (texture_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = texture_uri_;
    texture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Object::set_allocated_texture_uri(::std::string* texture_uri) {
  if (texture_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete texture_uri_;
  }
  if (texture_uri) {
    set_has_texture_uri();
    texture_uri_ = texture_uri;
  } else {
    clear_has_texture_uri();
    texture_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.texture_uri)
}

// optional string texture_name = 7;
inline bool Object::has_texture_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_texture_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_texture_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_texture_name() {
  if (texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_name_->clear();
  }
  clear_has_texture_name();
}
inline const ::std::string& Object::texture_name() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.texture_name)
  return *texture_name_;
}
inline void Object::set_texture_name(const ::std::string& value) {
  set_has_texture_name();
  if (texture_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_name_ = new ::std::string;
  }
  texture_name_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.Object.texture_name)
}
inline void Object::set_texture_name(const char* value) {
  set_has_texture_name();
  if (texture_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_name_ = new ::std::string;
  }
  texture_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.Object.texture_name)
}
inline void Object::set_texture_name(const char* value, size_t size) {
  set_has_texture_name();
  if (texture_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_name_ = new ::std::string;
  }
  texture_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.Object.texture_name)
}
inline ::std::string* Object::mutable_texture_name() {
  set_has_texture_name();
  if (texture_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    texture_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.texture_name)
  return texture_name_;
}
inline ::std::string* Object::release_texture_name() {
  clear_has_texture_name();
  if (texture_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = texture_name_;
    texture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Object::set_allocated_texture_name(::std::string* texture_name) {
  if (texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete texture_name_;
  }
  if (texture_name) {
    set_has_texture_name();
    texture_name_ = texture_name;
  } else {
    clear_has_texture_name();
    texture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.texture_name)
}

// optional double radius = 8;
inline bool Object::has_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double Object::radius() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.radius)
  return radius_;
}
inline void Object::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.Object.radius)
}

// optional double length = 9;
inline bool Object::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Object::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Object::length() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.length)
  return length_;
}
inline void Object::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:gap.msgs.Object.length)
}

// optional .gazebo.msgs.Vector3d box_size = 10;
inline bool Object::has_box_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_box_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_box_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Object::clear_box_size() {
  if (box_size_ != NULL) box_size_->::gazebo::msgs::Vector3d::Clear();
  clear_has_box_size();
}
inline const ::gazebo::msgs::Vector3d& Object::box_size() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.box_size)
  return box_size_ != NULL ? *box_size_ : *default_instance_->box_size_;
}
inline ::gazebo::msgs::Vector3d* Object::mutable_box_size() {
  set_has_box_size();
  if (box_size_ == NULL) box_size_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.box_size)
  return box_size_;
}
inline ::gazebo::msgs::Vector3d* Object::release_box_size() {
  clear_has_box_size();
  ::gazebo::msgs::Vector3d* temp = box_size_;
  box_size_ = NULL;
  return temp;
}
inline void Object::set_allocated_box_size(::gazebo::msgs::Vector3d* box_size) {
  delete box_size_;
  box_size_ = box_size;
  if (box_size) {
    set_has_box_size();
  } else {
    clear_has_box_size();
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.box_size)
}

// optional string sdf = 11;
inline bool Object::has_sdf() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Object::set_has_sdf() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Object::clear_has_sdf() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Object::clear_sdf() {
  if (sdf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdf_->clear();
  }
  clear_has_sdf();
}
inline const ::std::string& Object::sdf() const {
  // @@protoc_insertion_point(field_get:gap.msgs.Object.sdf)
  return *sdf_;
}
inline void Object::set_sdf(const ::std::string& value) {
  set_has_sdf();
  if (sdf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdf_ = new ::std::string;
  }
  sdf_->assign(value);
  // @@protoc_insertion_point(field_set:gap.msgs.Object.sdf)
}
inline void Object::set_sdf(const char* value) {
  set_has_sdf();
  if (sdf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdf_ = new ::std::string;
  }
  sdf_->assign(value);
  // @@protoc_insertion_point(field_set_char:gap.msgs.Object.sdf)
}
inline void Object::set_sdf(const char* value, size_t size) {
  set_has_sdf();
  if (sdf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdf_ = new ::std::string;
  }
  sdf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gap.msgs.Object.sdf)
}
inline ::std::string* Object::mutable_sdf() {
  set_has_sdf();
  if (sdf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gap.msgs.Object.sdf)
  return sdf_;
}
inline ::std::string* Object::release_sdf() {
  clear_has_sdf();
  if (sdf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdf_;
    sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Object::set_allocated_sdf(::std::string* sdf) {
  if (sdf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdf_;
  }
  if (sdf) {
    set_has_sdf();
    sdf_ = sdf;
  } else {
    clear_has_sdf();
    sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gap.msgs.Object.sdf)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gap

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gap::msgs::Object_ModelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gap::msgs::Object_ModelType>() {
  return ::gap::msgs::Object_ModelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_2eproto__INCLUDED
